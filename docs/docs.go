// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/login": {
            "post": {
                "description": "Authenticates admin and returns a JWT token in a cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hr.AdminLoginReqModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employee": {
            "post": {
                "description": "Creates a new employee along with all related records (emergency contacts, bank details, salary, etc.) in a transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employee"
                ],
                "summary": "Create Employee",
                "parameters": [
                    {
                        "description": "Employee data with all related details",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hr.EmpReqModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Employee created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employee/all": {
            "post": {
                "description": "Fetch employee details with search and pagination. Main branch users can view all employees; others see only employees in their branch.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employee"
                ],
                "summary": "Get Employees",
                "parameters": [
                    {
                        "description": "Search criteria and pagination for employees",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hr.GetEmployeeReqModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Employees fetched successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employee/login": {
            "post": {
                "description": "Authenticates user and returns a JWT token in a cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "employee login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hr.EmpLoginReqModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Authenticates user and returns a JWT token in a cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "user loginout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/testS3upload": {
            "post": {
                "description": "Uploads a file to S3 and returns the filename",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "upload-file"
                ],
                "summary": "Upload a file to S3",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/testauth": {
            "get": {
                "description": "Authenticates user and returns a JWT token in a cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User Auth",
                "responses": {
                    "200": {
                        "description": "login",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/testlogin": {
            "post": {
                "description": "Authenticates user and returns a JWT token in a cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hr.TUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "hr.AdminLoginReqModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "hr.CreateEmpBankDetailsReqModel": {
            "type": "object",
            "properties": {
                "account_holder": {
                    "type": "string"
                },
                "account_number": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "branch_name": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "integer"
                }
            }
        },
        "hr.CreateEmpBenifitsReqModel": {
            "type": "object",
            "properties": {
                "benifits": {
                    "type": "string"
                },
                "benifits_from": {
                    "type": "string"
                },
                "benifits_till": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "integer"
                },
                "health_insurance": {
                    "type": "string"
                },
                "insurance_from": {
                    "type": "string"
                },
                "insurance_till": {
                    "type": "string"
                },
                "leave_count": {
                    "type": "integer"
                },
                "leave_status": {
                    "type": "boolean"
                },
                "leave_type": {
                    "type": "string"
                },
                "retainment_plan": {
                    "type": "string"
                },
                "retainment_plan_from": {
                    "type": "string"
                },
                "retainment_plan_till": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "integer"
                }
            }
        },
        "hr.CreateEmpCertificatesReqModel": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "integer"
                },
                "image_path": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "integer"
                }
            }
        },
        "hr.CreateEmpEmergencyDetailsReqModel": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "integer"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "relationship": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "integer"
                }
            }
        },
        "hr.CreateEmpSalaryReqModel": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "integer"
                },
                "pension_employee": {
                    "type": "string"
                },
                "pension_employer": {
                    "type": "string"
                },
                "salary_type": {
                    "type": "string"
                },
                "total_net_salary": {
                    "type": "string"
                },
                "total_of_salary_allowances": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "integer"
                }
            }
        },
        "hr.CreateEmpStatusReqModel": {
            "type": "object",
            "properties": {
                "department": {
                    "type": "string"
                },
                "designation": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "integer"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_till": {
                    "type": "string"
                }
            }
        },
        "hr.CreateEmpUserReqModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "integer"
                }
            }
        },
        "hr.CreateEmployeeReqModel": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "current_country": {
                    "type": "string"
                },
                "dob": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "nic": {
                    "type": "string"
                },
                "nic_valid_till": {
                    "type": "string"
                },
                "passport_id": {
                    "type": "string"
                },
                "passport_valid_till": {
                    "type": "string"
                },
                "primary_number": {
                    "type": "string"
                },
                "religion": {
                    "type": "string"
                },
                "secondary_number": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "integer"
                }
            }
        },
        "hr.EmpLoginReqModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "hr.EmpReqModel": {
            "type": "object"
        },
        "hr.GetEmployeeReqModel": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "search": {
                    "type": "string"
                }
            }
        },
        "hr.TUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/hr-api",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
