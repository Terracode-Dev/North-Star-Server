basePath: /hr-api
definitions:
  hr.CreateEmpBankDetailsReqModel:
    properties:
      account_holder:
        type: string
      account_number:
        type: string
      bank_name:
        type: string
      branch_name:
        type: string
      employee_id:
        type: integer
      updated_by:
        type: integer
    type: object
  hr.CreateEmpBenifitsReqModel:
    properties:
      benifits:
        type: string
      benifits_from:
        type: string
      benifits_till:
        type: string
      employee_id:
        type: integer
      health_insurance:
        type: string
      insurance_from:
        type: string
      insurance_till:
        type: string
      leave_count:
        type: integer
      leave_status:
        type: boolean
      leave_type:
        type: string
      retainment_plan:
        type: string
      retainment_plan_from:
        type: string
      retainment_plan_till:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmpCertificatesReqModel:
    properties:
      date:
        type: string
      employee_id:
        type: integer
      image_path:
        type: string
      name:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmpEmergencyDetailsReqModel:
    properties:
      contact:
        type: string
      employee_id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      relationship:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmpSalaryReqModel:
    properties:
      amount:
        type: string
      employee_id:
        type: integer
      pension_employee:
        type: string
      pension_employer:
        type: string
      salary_type:
        type: string
      total_net_salary:
        type: string
      total_of_salary_allowances:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmpStatusReqModel:
    properties:
      department:
        type: string
      designation:
        type: string
      employee_id:
        type: integer
      status:
        type: string
      updated_by:
        type: integer
      valid_from:
        type: string
      valid_till:
        type: string
    type: object
  hr.CreateEmpUserReqModel:
    properties:
      email:
        type: string
      employee_id:
        type: integer
      password:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmployeeReqModel:
    properties:
      address:
        type: string
      country:
        type: string
      current_country:
        type: string
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      nationality:
        type: string
      nic:
        type: string
      nic_valid_till:
        type: string
      passport_id:
        type: string
      passport_valid_till:
        type: string
      primary_number:
        type: string
      religion:
        type: string
      secondary_number:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateHrAdminReqModel:
    properties:
      branch_id:
        type: integer
      created_by:
        type: integer
      email:
        type: string
      password:
        type: string
      role:
        type: string
      status:
        type: boolean
      updated_by:
        type: integer
      user_name:
        type: string
    type: object
  hr.CreatePayrollAllowancesParams:
    properties:
      amount:
        type: string
      name:
        type: string
      payroll_id:
        type: integer
      updated_by:
        type: integer
    type: object
  hr.CreatePayrollReqModel:
    properties:
      amount:
        type: string
      date:
        type: string
      employee:
        type: string
      pension:
        type: boolean
      pension_employee:
        type: string
      pension_employer:
        type: string
      salary_type:
        type: string
      tax:
        type: boolean
      tax_percentage:
        type: string
      total_net_salary:
        type: string
      total_net_salary_after_tax:
        type: string
      total_of_salary_allowances:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateServicesReqModel:
    properties:
      category:
        type: string
      updated_by:
        type: integer
      value:
        type: string
    type: object
  hr.EmpLoginReqModel:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  hr.EmpReqModel:
    type: object
  hr.GetAdminReqModel:
    properties:
      limit:
        type: integer
      page:
        type: integer
      search:
        type: string
    type: object
  hr.GetEmployeeReqModel:
    properties:
      limit:
        type: integer
      page:
        type: integer
      search:
        type: string
    type: object
  hr.GetPayrollsReqModel:
    properties:
      limit:
        type: integer
      page:
        type: integer
    type: object
  hr.PayrollAllowances:
    properties:
      allowances:
        items:
          $ref: '#/definitions/hr.CreatePayrollAllowancesParams'
        type: array
      payroll:
        $ref: '#/definitions/hr.CreatePayrollReqModel'
    type: object
  hr.TUser:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample server Petstore server.
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /admin:
    post:
      consumes:
      - application/json
      description: Create a new admin
      parameters:
      - description: Admin details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hr.CreateHrAdminReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: Admin created successfully
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Admin
      tags:
      - admin
  /admin/all:
    get:
      consumes:
      - application/json
      description: Get all admins
      parameters:
      - description: search query
        in: query
        name: search
        type: string
      - description: page number
        in: query
        name: pageNumber
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hr.GetAdminReqModel'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get all Admins
      tags:
      - admin
  /employee:
    post:
      consumes:
      - application/json
      description: Creates a new employee along with all related records (emergency
        contacts, bank details, salary, etc.) in a transaction
      parameters:
      - description: Employee data with all related details
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/hr.EmpReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: Employee created successfully
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Employee
      tags:
      - employee
  /employee/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an employee along with all related records (emergency contacts,
        bank details, salary, etc.) in a transaction
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee deleted successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete Employee
      tags:
      - employee
    get:
      consumes:
      - application/json
      description: Fetches details of a single employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee fetched successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Employee not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get One Employee
      tags:
      - employee
    put:
      consumes:
      - application/json
      description: Updates employee details
      produces:
      - application/json
      responses:
        "200":
          description: Employee updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee
      tags:
      - employee
  /employee/accessiability:
    put:
      consumes:
      - application/json
      description: Updates employee accessiability details
      produces:
      - application/json
      responses:
        "200":
          description: Employee accessiability updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Accessiability
      tags:
      - employee
  /employee/all:
    post:
      consumes:
      - application/json
      description: Fetch employee details with search and pagination. Main branch
        users can view all employees; others see only employees in their branch.
      parameters:
      - description: Search criteria and pagination for employees
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/hr.GetEmployeeReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: Employees fetched successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get Employees
      tags:
      - employee
  /employee/allowances:
    put:
      consumes:
      - application/json
      description: Updates employee allowances details
      produces:
      - application/json
      responses:
        "200":
          description: Employee allowances updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Allowances
      tags:
      - employee
  /employee/bank:
    put:
      consumes:
      - application/json
      description: Updates employee bank details
      produces:
      - application/json
      responses:
        "200":
          description: Employee bank details updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Bank Details
      tags:
      - employee
  /employee/benifits:
    put:
      consumes:
      - application/json
      description: Updates employee benifits details
      produces:
      - application/json
      responses:
        "200":
          description: Employee benifits updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Benifits
      tags:
      - employee
  /employee/certificates:
    put:
      consumes:
      - application/json
      description: Updates employee certificates details
      produces:
      - application/json
      responses:
        "200":
          description: Employee certificates updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Certificates
      tags:
      - employee
  /employee/emergency:
    put:
      consumes:
      - application/json
      description: Updates employee emergency details
      produces:
      - application/json
      responses:
        "200":
          description: Employee emergency details updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Emergency Details
      tags:
      - employee
  /employee/empbank:
    put:
      consumes:
      - application/json
      description: Updates employee bank details
      parameters:
      - description: User ID
        in: header
        name: user_id
        required: true
        type: integer
      - description: Employee bank details
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/hr.CreateEmpBankDetailsReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: Employee bank details updated successfully
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: empOnlyBankDetailsUpdate
      tags:
      - employee
  /employee/expatriate:
    put:
      consumes:
      - application/json
      description: Updates employee expatriate details
      produces:
      - application/json
      responses:
        "200":
          description: Employee expatriate updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Expatriate
      tags:
      - employee
  /employee/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token in a cookie
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hr.EmpLoginReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: employee login
      tags:
      - auth
  /employee/salary:
    put:
      consumes:
      - application/json
      description: Updates employee salary details
      produces:
      - application/json
      responses:
        "200":
          description: Employee salary updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Salary
      tags:
      - employee
  /employee/status:
    put:
      consumes:
      - application/json
      description: Updates employee status details
      produces:
      - application/json
      responses:
        "200":
          description: Employee status updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee Status
      tags:
      - employee
  /employee/user:
    put:
      consumes:
      - application/json
      description: Updates employee user details
      produces:
      - application/json
      responses:
        "200":
          description: Employee user updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Employee User
      tags:
      - employee
  /logout:
    get:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token in a cookie
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: user loginout
      tags:
      - auth
  /payroll:
    get:
      consumes:
      - application/json
      description: Get all payrolls
      parameters:
      - description: search query
        in: query
        name: search
        type: string
      - description: page number
        in: query
        name: pageNumber
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hr.GetPayrollsReqModel'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get Payrolls
      tags:
      - payroll
    post:
      consumes:
      - application/json
      description: Create a new payroll
      parameters:
      - description: Payroll details
        in: body
        name: payroll
        required: true
        schema:
          $ref: '#/definitions/hr.PayrollAllowances'
      produces:
      - application/json
      responses:
        "200":
          description: Payroll Created
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Payroll
      tags:
      - payroll
  /payroll/{id}:
    get:
      consumes:
      - application/json
      description: Get one payroll
      parameters:
      - description: payroll id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hr.PayrollAllowances'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get Payroll
      tags:
      - payroll
    put:
      consumes:
      - application/json
      description: Update payroll
      parameters:
      - description: payroll id
        in: path
        name: id
        required: true
        type: integer
      - description: Payroll details
        in: body
        name: payroll
        required: true
        schema:
          $ref: '#/definitions/hr.CreatePayrollReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: Payroll Updated
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Update Payroll
      tags:
      - payroll
  /service:
    post:
      consumes:
      - application/json
      description: Create a new service
      parameters:
      - description: Service details
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/hr.CreateServicesReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: Service Created
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Service
      tags:
      - services
  /service/{category}:
    get:
      consumes:
      - application/json
      description: Get a service
      parameters:
      - description: service category
        in: path
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Service fetched successfully
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get Service
      tags:
      - services
  /services:
    get:
      consumes:
      - application/json
      description: Get all services
      produces:
      - application/json
      responses:
        "200":
          description: Services fetched successfully
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get Services
      tags:
      - services
  /testS3upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a file to S3 and returns the filename
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: File uploaded successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Upload a file to S3
      tags:
      - upload-file
  /testauth:
    get:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token in a cookie
      produces:
      - application/json
      responses:
        "200":
          description: login
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: User Auth
      tags:
      - auth
  /testlogin:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token in a cookie
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hr.TUser'
      produces:
      - application/json
      responses:
        "200":
          description: login
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: User login
      tags:
      - auth
swagger: "2.0"
