basePath: /hr-api
definitions:
  hr.AdminLoginReqModel:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  hr.CreateEmpBankDetailsReqModel:
    properties:
      account_holder:
        type: string
      account_number:
        type: string
      bank_name:
        type: string
      branch_name:
        type: string
      employee_id:
        type: integer
      updated_by:
        type: integer
    type: object
  hr.CreateEmpBenifitsReqModel:
    properties:
      benifits:
        type: string
      benifits_from:
        type: string
      benifits_till:
        type: string
      employee_id:
        type: integer
      health_insurance:
        type: string
      insurance_from:
        type: string
      insurance_till:
        type: string
      leave_count:
        type: integer
      leave_status:
        type: boolean
      leave_type:
        type: string
      retainment_plan:
        type: string
      retainment_plan_from:
        type: string
      retainment_plan_till:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmpCertificatesReqModel:
    properties:
      date:
        type: string
      employee_id:
        type: integer
      image_path:
        type: string
      name:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmpEmergencyDetailsReqModel:
    properties:
      contact:
        type: string
      employee_id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      relationship:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmpSalaryReqModel:
    properties:
      amount:
        type: string
      employee_id:
        type: integer
      pension_employee:
        type: string
      pension_employer:
        type: string
      salary_type:
        type: string
      total_net_salary:
        type: string
      total_of_salary_allowances:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmpStatusReqModel:
    properties:
      department:
        type: string
      designation:
        type: string
      employee_id:
        type: integer
      status:
        type: string
      updated_by:
        type: integer
      valid_from:
        type: string
      valid_till:
        type: string
    type: object
  hr.CreateEmpUserReqModel:
    properties:
      email:
        type: string
      employee_id:
        type: integer
      password:
        type: string
      updated_by:
        type: integer
    type: object
  hr.CreateEmployeeReqModel:
    properties:
      address:
        type: string
      country:
        type: string
      current_country:
        type: string
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      nationality:
        type: string
      nic:
        type: string
      nic_valid_till:
        type: string
      passport_id:
        type: string
      passport_valid_till:
        type: string
      primary_number:
        type: string
      religion:
        type: string
      secondary_number:
        type: string
      updated_by:
        type: integer
    type: object
  hr.EmpLoginReqModel:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  hr.EmpReqModel:
    type: object
  hr.GetEmployeeReqModel:
    properties:
      limit:
        type: integer
      page:
        type: integer
      search:
        type: string
    type: object
  hr.TUser:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample server Petstore server.
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticates admin and returns a JWT token in a cookie
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hr.AdminLoginReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Admin login
      tags:
      - auth
  /employee:
    post:
      consumes:
      - application/json
      description: Creates a new employee along with all related records (emergency
        contacts, bank details, salary, etc.) in a transaction
      parameters:
      - description: Employee data with all related details
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/hr.EmpReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: Employee created successfully
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Employee
      tags:
      - employee
  /employee/all:
    post:
      consumes:
      - application/json
      description: Fetch employee details with search and pagination. Main branch
        users can view all employees; others see only employees in their branch.
      parameters:
      - description: Search criteria and pagination for employees
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/hr.GetEmployeeReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: Employees fetched successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get Employees
      tags:
      - employee
  /employee/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token in a cookie
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hr.EmpLoginReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: employee login
      tags:
      - auth
  /logout:
    get:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token in a cookie
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: user loginout
      tags:
      - auth
  /testS3upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a file to S3 and returns the filename
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: File uploaded successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Upload a file to S3
      tags:
      - upload-file
  /testauth:
    get:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token in a cookie
      produces:
      - application/json
      responses:
        "200":
          description: login
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: User Auth
      tags:
      - auth
  /testlogin:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token in a cookie
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hr.TUser'
      produces:
      - application/json
      responses:
        "200":
          description: login
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: User login
      tags:
      - auth
swagger: "2.0"
