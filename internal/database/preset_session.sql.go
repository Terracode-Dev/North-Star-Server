// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: preset_session.sql

package database

import (
	"context"
)

const createPresetSession = `-- name: CreatePresetSession :exec
INSERT INTO V2Preset_Session (
  preset_id,
  client_id,
  assign_session,
  active_day,
  max_day,
  state
) VALUES (?, ?, ?, ?, ?, ?)
`

type CreatePresetSessionParams struct {
	PresetID      int64  `json:"preset_id"`
	ClientID      int64  `json:"client_id"`
	AssignSession int64  `json:"assign_session"`
	ActiveDay     int64  `json:"active_day"`
	MaxDay        int64  `json:"max_day"`
	State         string `json:"state"`
}

func (q *Queries) CreatePresetSession(ctx context.Context, arg CreatePresetSessionParams) error {
	_, err := q.db.ExecContext(ctx, createPresetSession,
		arg.PresetID,
		arg.ClientID,
		arg.AssignSession,
		arg.ActiveDay,
		arg.MaxDay,
		arg.State,
	)
	return err
}

const deletePresetSession = `-- name: DeletePresetSession :exec
DELETE FROM V2Preset_Session
WHERE id = ?
`

func (q *Queries) DeletePresetSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePresetSession, id)
	return err
}

const selectpresetSessionAll = `-- name: SelectpresetSessionAll :many
SELECT preset_id, client_id, assign_session, active_day, max_day, state
FROM V2Preset_Session
`

type SelectpresetSessionAllRow struct {
	PresetID      int64  `json:"preset_id"`
	ClientID      int64  `json:"client_id"`
	AssignSession int64  `json:"assign_session"`
	ActiveDay     int64  `json:"active_day"`
	MaxDay        int64  `json:"max_day"`
	State         string `json:"state"`
}

func (q *Queries) SelectpresetSessionAll(ctx context.Context) ([]SelectpresetSessionAllRow, error) {
	rows, err := q.db.QueryContext(ctx, selectpresetSessionAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectpresetSessionAllRow
	for rows.Next() {
		var i SelectpresetSessionAllRow
		if err := rows.Scan(
			&i.PresetID,
			&i.ClientID,
			&i.AssignSession,
			&i.ActiveDay,
			&i.MaxDay,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePresetSession = `-- name: UpdatePresetSession :exec
UPDATE V2Preset_Session
SET
  preset_id = ?,
  client_id = ?,
  assign_session = ?,
  active_day = ?,
  max_day = ?,
  state = ?
WHERE id = ?
`

type UpdatePresetSessionParams struct {
	PresetID      int64  `json:"preset_id"`
	ClientID      int64  `json:"client_id"`
	AssignSession int64  `json:"assign_session"`
	ActiveDay     int64  `json:"active_day"`
	MaxDay        int64  `json:"max_day"`
	State         string `json:"state"`
	ID            int64  `json:"id"`
}

func (q *Queries) UpdatePresetSession(ctx context.Context, arg UpdatePresetSessionParams) error {
	_, err := q.db.ExecContext(ctx, updatePresetSession,
		arg.PresetID,
		arg.ClientID,
		arg.AssignSession,
		arg.ActiveDay,
		arg.MaxDay,
		arg.State,
		arg.ID,
	)
	return err
}
