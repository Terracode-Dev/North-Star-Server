// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package database

import (
	"context"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO V2Session (
  client_id,
  trainer_id
) VALUES (?, ?)
`

type CreateSessionParams struct {
	ClientID  int64 `json:"client_id"`
	TrainerID int64 `json:"trainer_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.ClientID, arg.TrainerID)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM V2Session
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const selectAllSessions = `-- name: SelectAllSessions :many
SELECT id, client_id, trainer_id
FROM V2Session
`

type SelectAllSessionsRow struct {
	ID        int64 `json:"id"`
	ClientID  int64 `json:"client_id"`
	TrainerID int64 `json:"trainer_id"`
}

func (q *Queries) SelectAllSessions(ctx context.Context) ([]SelectAllSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllSessionsRow
	for rows.Next() {
		var i SelectAllSessionsRow
		if err := rows.Scan(&i.ID, &i.ClientID, &i.TrainerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSession = `-- name: SelectSession :one
SELECT id, client_id, trainer_id
FROM V2Session
WHERE id = ?
`

type SelectSessionRow struct {
	ID        int64 `json:"id"`
	ClientID  int64 `json:"client_id"`
	TrainerID int64 `json:"trainer_id"`
}

func (q *Queries) SelectSession(ctx context.Context, id int64) (SelectSessionRow, error) {
	row := q.db.QueryRowContext(ctx, selectSession, id)
	var i SelectSessionRow
	err := row.Scan(&i.ID, &i.ClientID, &i.TrainerID)
	return i, err
}
