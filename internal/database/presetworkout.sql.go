// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: presetworkout.sql

package database

import (
	"context"
	"database/sql"
)

const createPresetWorkout = `-- name: CreatePresetWorkout :exec
INSERT INTO V2Preset_Workouts (
  preset_id,
  workout_id,
  reps,
  weight,
  sets,
  notes
)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreatePresetWorkoutParams struct {
	PresetID  int64          `json:"preset_id"`
	WorkoutID int64          `json:"workout_id"`
	Reps      int64          `json:"reps"`
	Weight    sql.NullString `json:"weight"`
	Sets      int64          `json:"sets"`
	Notes     sql.NullString `json:"notes"`
}

func (q *Queries) CreatePresetWorkout(ctx context.Context, arg CreatePresetWorkoutParams) error {
	_, err := q.db.ExecContext(ctx, createPresetWorkout,
		arg.PresetID,
		arg.WorkoutID,
		arg.Reps,
		arg.Weight,
		arg.Sets,
		arg.Notes,
	)
	return err
}

const deletePresetWorkout = `-- name: DeletePresetWorkout :exec
DELETE FROM V2Preset_Workouts
WHERE id = ?
`

func (q *Queries) DeletePresetWorkout(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePresetWorkout, id)
	return err
}

const selectAllPresetWorkouts = `-- name: SelectAllPresetWorkouts :many
SELECT preset_id, workout_id, reps, weight, sets, notes 
FROM V2Preset_Workouts
`

type SelectAllPresetWorkoutsRow struct {
	PresetID  int64          `json:"preset_id"`
	WorkoutID int64          `json:"workout_id"`
	Reps      int64          `json:"reps"`
	Weight    sql.NullString `json:"weight"`
	Sets      int64          `json:"sets"`
	Notes     sql.NullString `json:"notes"`
}

func (q *Queries) SelectAllPresetWorkouts(ctx context.Context) ([]SelectAllPresetWorkoutsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllPresetWorkouts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllPresetWorkoutsRow
	for rows.Next() {
		var i SelectAllPresetWorkoutsRow
		if err := rows.Scan(
			&i.PresetID,
			&i.WorkoutID,
			&i.Reps,
			&i.Weight,
			&i.Sets,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePresetWorkout = `-- name: UpdatePresetWorkout :exec
UPDATE V2Preset_Workouts
SET
  preset_id = ?,
  workout_id = ?,
  reps = ?,
  weight = ?,
  sets = ?,
  notes = ?
WHERE id = ?
`

type UpdatePresetWorkoutParams struct {
	PresetID  int64          `json:"preset_id"`
	WorkoutID int64          `json:"workout_id"`
	Reps      int64          `json:"reps"`
	Weight    sql.NullString `json:"weight"`
	Sets      int64          `json:"sets"`
	Notes     sql.NullString `json:"notes"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdatePresetWorkout(ctx context.Context, arg UpdatePresetWorkoutParams) error {
	_, err := q.db.ExecContext(ctx, updatePresetWorkout,
		arg.PresetID,
		arg.WorkoutID,
		arg.Reps,
		arg.Weight,
		arg.Sets,
		arg.Notes,
		arg.ID,
	)
	return err
}
