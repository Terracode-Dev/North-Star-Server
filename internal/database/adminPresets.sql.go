// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: adminPresets.sql

package database

import (
	"context"
	"encoding/json"
)

const createAdminPreset = `-- name: CreateAdminPreset :exec
INSERT INTO Admin_Presets (preset_name, preset_value, slug) VALUES (?, ?, ?)
`

type CreateAdminPresetParams struct {
	PresetName  string          `json:"preset_name"`
	PresetValue json.RawMessage `json:"preset_value"`
	Slug        string          `json:"slug"`
}

func (q *Queries) CreateAdminPreset(ctx context.Context, arg CreateAdminPresetParams) error {
	_, err := q.db.ExecContext(ctx, createAdminPreset, arg.PresetName, arg.PresetValue, arg.Slug)
	return err
}

const getAdminPresetBySlug = `-- name: GetAdminPresetBySlug :one
SELECT id, preset_name, preset_value, slug FROM Admin_Presets WHERE slug = ?
`

func (q *Queries) GetAdminPresetBySlug(ctx context.Context, slug string) (AdminPreset, error) {
	row := q.db.QueryRowContext(ctx, getAdminPresetBySlug, slug)
	var i AdminPreset
	err := row.Scan(
		&i.ID,
		&i.PresetName,
		&i.PresetValue,
		&i.Slug,
	)
	return i, err
}

const listAdminPresets = `-- name: ListAdminPresets :many
SELECT id, preset_name, preset_value, slug FROM Admin_Presets
`

func (q *Queries) ListAdminPresets(ctx context.Context) ([]AdminPreset, error) {
	rows, err := q.db.QueryContext(ctx, listAdminPresets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminPreset
	for rows.Next() {
		var i AdminPreset
		if err := rows.Scan(
			&i.ID,
			&i.PresetName,
			&i.PresetValue,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
