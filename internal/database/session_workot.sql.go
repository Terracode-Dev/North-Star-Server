// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session_workot.sql

package database

import (
	"context"
	"database/sql"
)

const createSessionWorkout = `-- name: CreateSessionWorkout :exec
INSERT INTO Session_Workout (
  preset_session_id,
  active_day,
  workout_id,
  status,
  session_id
) VALUES (?, ?, ?, ?, ?)
`

type CreateSessionWorkoutParams struct {
	PresetSessionID int64          `json:"preset_session_id"`
	ActiveDay       int64          `json:"active_day"`
	WorkoutID       int64          `json:"workout_id"`
	Status          sql.NullString `json:"status"`
	SessionID       int64          `json:"session_id"`
}

func (q *Queries) CreateSessionWorkout(ctx context.Context, arg CreateSessionWorkoutParams) error {
	_, err := q.db.ExecContext(ctx, createSessionWorkout,
		arg.PresetSessionID,
		arg.ActiveDay,
		arg.WorkoutID,
		arg.Status,
		arg.SessionID,
	)
	return err
}

const deleteSessionWorkout = `-- name: DeleteSessionWorkout :exec
DELETE FROM Session_Workout
WHERE id = ?
`

func (q *Queries) DeleteSessionWorkout(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSessionWorkout, id)
	return err
}

const selectAllSessionWorkouts = `-- name: SelectAllSessionWorkouts :many
SELECT id, preset_session_id, active_day, workout_id, status, session_id
FROM Session_Workout
`

type SelectAllSessionWorkoutsRow struct {
	ID              int64          `json:"id"`
	PresetSessionID int64          `json:"preset_session_id"`
	ActiveDay       int64          `json:"active_day"`
	WorkoutID       int64          `json:"workout_id"`
	Status          sql.NullString `json:"status"`
	SessionID       int64          `json:"session_id"`
}

func (q *Queries) SelectAllSessionWorkouts(ctx context.Context) ([]SelectAllSessionWorkoutsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllSessionWorkouts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllSessionWorkoutsRow
	for rows.Next() {
		var i SelectAllSessionWorkoutsRow
		if err := rows.Scan(
			&i.ID,
			&i.PresetSessionID,
			&i.ActiveDay,
			&i.WorkoutID,
			&i.Status,
			&i.SessionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSessionWorkout = `-- name: SelectSessionWorkout :one
SELECT id, preset_session_id, active_day, workout_id, status, session_id
FROM Session_Workout
WHERE id = ?
`

type SelectSessionWorkoutRow struct {
	ID              int64          `json:"id"`
	PresetSessionID int64          `json:"preset_session_id"`
	ActiveDay       int64          `json:"active_day"`
	WorkoutID       int64          `json:"workout_id"`
	Status          sql.NullString `json:"status"`
	SessionID       int64          `json:"session_id"`
}

func (q *Queries) SelectSessionWorkout(ctx context.Context, id int64) (SelectSessionWorkoutRow, error) {
	row := q.db.QueryRowContext(ctx, selectSessionWorkout, id)
	var i SelectSessionWorkoutRow
	err := row.Scan(
		&i.ID,
		&i.PresetSessionID,
		&i.ActiveDay,
		&i.WorkoutID,
		&i.Status,
		&i.SessionID,
	)
	return i, err
}

const updateSessionWorkout = `-- name: UpdateSessionWorkout :exec
UPDATE Session_Workout
SET
  preset_session_id = ?,
  active_day = ?,
  workout_id = ?,
  status = ?,
  session_id = ?
WHERE id = ?
`

type UpdateSessionWorkoutParams struct {
	PresetSessionID int64          `json:"preset_session_id"`
	ActiveDay       int64          `json:"active_day"`
	WorkoutID       int64          `json:"workout_id"`
	Status          sql.NullString `json:"status"`
	SessionID       int64          `json:"session_id"`
	ID              int64          `json:"id"`
}

func (q *Queries) UpdateSessionWorkout(ctx context.Context, arg UpdateSessionWorkoutParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionWorkout,
		arg.PresetSessionID,
		arg.ActiveDay,
		arg.WorkoutID,
		arg.Status,
		arg.SessionID,
		arg.ID,
	)
	return err
}
