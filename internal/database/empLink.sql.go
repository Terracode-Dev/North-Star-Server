// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: empLink.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createEmpLink = `-- name: CreateEmpLink :exec
INSERT INTO emp_link (emp_data, preset_id, is_approved, email, updated_by) VALUES (?, ?, ?, ?, ?)
`

type CreateEmpLinkParams struct {
	EmpData    json.RawMessage `json:"emp_data"`
	PresetID   int64           `json:"preset_id"`
	IsApproved bool            `json:"is_approved"`
	Email      string          `json:"email"`
	UpdatedBy  sql.NullInt64   `json:"updated_by"`
}

func (q *Queries) CreateEmpLink(ctx context.Context, arg CreateEmpLinkParams) error {
	_, err := q.db.ExecContext(ctx, createEmpLink,
		arg.EmpData,
		arg.PresetID,
		arg.IsApproved,
		arg.Email,
		arg.UpdatedBy,
	)
	return err
}

const getEmpLinkByID = `-- name: GetEmpLinkByID :one
SELECT id, emp_data, preset_id, is_approved, create_date, email, updated_by FROM emp_link WHERE id = ?
`

func (q *Queries) GetEmpLinkByID(ctx context.Context, id int64) (EmpLink, error) {
	row := q.db.QueryRowContext(ctx, getEmpLinkByID, id)
	var i EmpLink
	err := row.Scan(
		&i.ID,
		&i.EmpData,
		&i.PresetID,
		&i.IsApproved,
		&i.CreateDate,
		&i.Email,
		&i.UpdatedBy,
	)
	return i, err
}

const listEmpLinks = `-- name: ListEmpLinks :many
SELECT id, emp_data, preset_id, is_approved, create_date, email, updated_by FROM emp_link
`

func (q *Queries) ListEmpLinks(ctx context.Context) ([]EmpLink, error) {
	rows, err := q.db.QueryContext(ctx, listEmpLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmpLink
	for rows.Next() {
		var i EmpLink
		if err := rows.Scan(
			&i.ID,
			&i.EmpData,
			&i.PresetID,
			&i.IsApproved,
			&i.CreateDate,
			&i.Email,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmpLinkApproval = `-- name: UpdateEmpLinkApproval :exec
UPDATE emp_link SET is_approved = ?, updated_by = ? WHERE id = ?
`

type UpdateEmpLinkApprovalParams struct {
	IsApproved bool          `json:"is_approved"`
	UpdatedBy  sql.NullInt64 `json:"updated_by"`
	ID         int64         `json:"id"`
}

func (q *Queries) UpdateEmpLinkApproval(ctx context.Context, arg UpdateEmpLinkApprovalParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpLinkApproval, arg.IsApproved, arg.UpdatedBy, arg.ID)
	return err
}
