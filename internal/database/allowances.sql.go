// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: allowances.sql

package database

import (
	"context"
	"database/sql"

	"github.com/shopspring/decimal"
)

const createAllowances = `-- name: CreateAllowances :exec
INSERT INTO HR_Create_Allowances (
    allowance_type, amount, updated_by
) VALUES (
    ?, ?, ?
)
`

type CreateAllowancesParams struct {
	AllowanceType string          `json:"allowance_type"`
	Amount        decimal.Decimal `json:"amount"`
	UpdatedBy     sql.NullInt64   `json:"updated_by"`
}

func (q *Queries) CreateAllowances(ctx context.Context, arg CreateAllowancesParams) error {
	_, err := q.db.ExecContext(ctx, createAllowances, arg.AllowanceType, arg.Amount, arg.UpdatedBy)
	return err
}

const deleteAllowance = `-- name: DeleteAllowance :exec
DELETE FROM HR_Create_Allowances
WHERE id = ?
`

func (q *Queries) DeleteAllowance(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllowance, id)
	return err
}

const getAllowance = `-- name: GetAllowance :one
SELECT id, allowance_type, amount, updated_by, created_at, updated_at FROM HR_Create_Allowances
WHERE id = ?
`

func (q *Queries) GetAllowance(ctx context.Context, id int64) (HrCreateAllowance, error) {
	row := q.db.QueryRowContext(ctx, getAllowance, id)
	var i HrCreateAllowance
	err := row.Scan(
		&i.ID,
		&i.AllowanceType,
		&i.Amount,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllowances = `-- name: GetAllowances :many
SELECT id, allowance_type, amount, updated_by, created_at, updated_at FROM HR_Create_Allowances
`

func (q *Queries) GetAllowances(ctx context.Context) ([]HrCreateAllowance, error) {
	rows, err := q.db.QueryContext(ctx, getAllowances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrCreateAllowance
	for rows.Next() {
		var i HrCreateAllowance
		if err := rows.Scan(
			&i.ID,
			&i.AllowanceType,
			&i.Amount,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAllowance = `-- name: UpdateAllowance :exec
UPDATE HR_Create_Allowances
SET allowance_type = ?, amount = ?, updated_by = ?
WHERE id = ?
`

type UpdateAllowanceParams struct {
	AllowanceType string          `json:"allowance_type"`
	Amount        decimal.Decimal `json:"amount"`
	UpdatedBy     sql.NullInt64   `json:"updated_by"`
	ID            int64           `json:"id"`
}

func (q *Queries) UpdateAllowance(ctx context.Context, arg UpdateAllowanceParams) error {
	_, err := q.db.ExecContext(ctx, updateAllowance,
		arg.AllowanceType,
		arg.Amount,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
