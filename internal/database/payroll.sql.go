// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payroll.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/shopspring/decimal"
)

const createHRTrainerCom = `-- name: CreateHRTrainerCom :exec
INSERT INTO HR_Trainer_Com (
    payroll_id,
    trainer_id,
    employee_id,
    commission,
    assigned_count,
    total
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateHRTrainerComParams struct {
	PayrollID     int64           `json:"payroll_id"`
	TrainerID     int64           `json:"trainer_id"`
	EmployeeID    int64           `json:"employee_id"`
	Commission    decimal.Decimal `json:"commission"`
	AssignedCount int64           `json:"assigned_count"`
	Total         decimal.Decimal `json:"total"`
}

func (q *Queries) CreateHRTrainerCom(ctx context.Context, arg CreateHRTrainerComParams) error {
	_, err := q.db.ExecContext(ctx, createHRTrainerCom,
		arg.PayrollID,
		arg.TrainerID,
		arg.EmployeeID,
		arg.Commission,
		arg.AssignedCount,
		arg.Total,
	)
	return err
}

const createPayroll = `-- name: CreatePayroll :execresult
INSERT INTO HR_Payroll (
    employee, date, salary_type, amount, salary_amount_type, total_of_salary_allowances,total_allowances_type, pension, pension_employer, pension_employer_type, pension_employee, pension_employee_type, total_net_salary, total_net_salary_type, tax, tax_percentage, total_net_salary_after_tax, total_net_salary_after_tax_type, er_id, updated_by
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreatePayrollParams struct {
	Employee                   string          `json:"employee"`
	Date                       time.Time       `json:"date"`
	SalaryType                 string          `json:"salary_type"`
	Amount                     decimal.Decimal `json:"amount"`
	SalaryAmountType           string          `json:"salary_amount_type"`
	TotalOfSalaryAllowances    decimal.Decimal `json:"total_of_salary_allowances"`
	TotalAllowancesType        string          `json:"total_allowances_type"`
	Pension                    bool            `json:"pension"`
	PensionEmployer            sql.NullString  `json:"pension_employer"`
	PensionEmployerType        sql.NullString  `json:"pension_employer_type"`
	PensionEmployee            sql.NullString  `json:"pension_employee"`
	PensionEmployeeType        sql.NullString  `json:"pension_employee_type"`
	TotalNetSalary             decimal.Decimal `json:"total_net_salary"`
	TotalNetSalaryType         string          `json:"total_net_salary_type"`
	Tax                        bool            `json:"tax"`
	TaxPercentage              sql.NullString  `json:"tax_percentage"`
	TotalNetSalaryAfterTax     decimal.Decimal `json:"total_net_salary_after_tax"`
	TotalNetSalaryAfterTaxType string          `json:"total_net_salary_after_tax_type"`
	ErID                       sql.NullInt64   `json:"er_id"`
	UpdatedBy                  sql.NullInt64   `json:"updated_by"`
}

func (q *Queries) CreatePayroll(ctx context.Context, arg CreatePayrollParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPayroll,
		arg.Employee,
		arg.Date,
		arg.SalaryType,
		arg.Amount,
		arg.SalaryAmountType,
		arg.TotalOfSalaryAllowances,
		arg.TotalAllowancesType,
		arg.Pension,
		arg.PensionEmployer,
		arg.PensionEmployerType,
		arg.PensionEmployee,
		arg.PensionEmployeeType,
		arg.TotalNetSalary,
		arg.TotalNetSalaryType,
		arg.Tax,
		arg.TaxPercentage,
		arg.TotalNetSalaryAfterTax,
		arg.TotalNetSalaryAfterTaxType,
		arg.ErID,
		arg.UpdatedBy,
	)
}

const createPayrollAllowances = `-- name: CreatePayrollAllowances :exec
INSERT INTO HR_Payroll_Allowances (
    name, amount, amount_type, payroll_id, updated_by
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreatePayrollAllowancesParams struct {
	Name       string          `json:"name"`
	Amount     decimal.Decimal `json:"amount"`
	AmountType string          `json:"amount_type"`
	PayrollID  int64           `json:"payroll_id"`
	UpdatedBy  sql.NullInt64   `json:"updated_by"`
}

func (q *Queries) CreatePayrollAllowances(ctx context.Context, arg CreatePayrollAllowancesParams) error {
	_, err := q.db.ExecContext(ctx, createPayrollAllowances,
		arg.Name,
		arg.Amount,
		arg.AmountType,
		arg.PayrollID,
		arg.UpdatedBy,
	)
	return err
}

const getOnePayroll = `-- name: GetOnePayroll :many
SELECT 
    p.id AS payroll_id,
    p.employee,
    p.date,
    p.salary_type,
    p.amount,
    p.salary_amount_type,
    p.total_of_salary_allowances,
    p.total_allowances_type,
    p.pension,
    p.pension_employer,
    p.pension_employer_type,
    p.pension_employee,
    p.pension_employee_type,
    p.total_net_salary,
    p.total_net_salary_type,
    p.tax,
    p.tax_percentage,
    p.total_net_salary_after_tax,
    p.total_net_salary_after_tax_type,
    p.updated_by AS payroll_updated_by,
    p.created_at AS payroll_created_at,
    p.updated_at AS payroll_updated_at,
    a.id AS allowance_id,
    a.name AS allowance_name,
    a.amount AS allowance_amount,
    a.payroll_id AS allowance_payroll_id,
    a.updated_by AS allowance_updated_by,
    a.created_at AS allowance_created_at
FROM HR_Payroll p
LEFT JOIN HR_Payroll_Allowances a 
    ON p.id = a.payroll_id
WHERE p.id = ?
`

type GetOnePayrollRow struct {
	PayrollID                  int64           `json:"payroll_id"`
	Employee                   string          `json:"employee"`
	Date                       time.Time       `json:"date"`
	SalaryType                 string          `json:"salary_type"`
	Amount                     decimal.Decimal `json:"amount"`
	SalaryAmountType           string          `json:"salary_amount_type"`
	TotalOfSalaryAllowances    decimal.Decimal `json:"total_of_salary_allowances"`
	TotalAllowancesType        string          `json:"total_allowances_type"`
	Pension                    bool            `json:"pension"`
	PensionEmployer            sql.NullString  `json:"pension_employer"`
	PensionEmployerType        sql.NullString  `json:"pension_employer_type"`
	PensionEmployee            sql.NullString  `json:"pension_employee"`
	PensionEmployeeType        sql.NullString  `json:"pension_employee_type"`
	TotalNetSalary             decimal.Decimal `json:"total_net_salary"`
	TotalNetSalaryType         string          `json:"total_net_salary_type"`
	Tax                        bool            `json:"tax"`
	TaxPercentage              sql.NullString  `json:"tax_percentage"`
	TotalNetSalaryAfterTax     decimal.Decimal `json:"total_net_salary_after_tax"`
	TotalNetSalaryAfterTaxType string          `json:"total_net_salary_after_tax_type"`
	PayrollUpdatedBy           sql.NullInt64   `json:"payroll_updated_by"`
	PayrollCreatedAt           sql.NullTime    `json:"payroll_created_at"`
	PayrollUpdatedAt           sql.NullTime    `json:"payroll_updated_at"`
	AllowanceID                sql.NullInt64   `json:"allowance_id"`
	AllowanceName              sql.NullString  `json:"allowance_name"`
	AllowanceAmount            sql.NullString  `json:"allowance_amount"`
	AllowancePayrollID         sql.NullInt64   `json:"allowance_payroll_id"`
	AllowanceUpdatedBy         sql.NullInt64   `json:"allowance_updated_by"`
	AllowanceCreatedAt         sql.NullTime    `json:"allowance_created_at"`
}

func (q *Queries) GetOnePayroll(ctx context.Context, id int64) ([]GetOnePayrollRow, error) {
	rows, err := q.db.QueryContext(ctx, getOnePayroll, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOnePayrollRow
	for rows.Next() {
		var i GetOnePayrollRow
		if err := rows.Scan(
			&i.PayrollID,
			&i.Employee,
			&i.Date,
			&i.SalaryType,
			&i.Amount,
			&i.SalaryAmountType,
			&i.TotalOfSalaryAllowances,
			&i.TotalAllowancesType,
			&i.Pension,
			&i.PensionEmployer,
			&i.PensionEmployerType,
			&i.PensionEmployee,
			&i.PensionEmployeeType,
			&i.TotalNetSalary,
			&i.TotalNetSalaryType,
			&i.Tax,
			&i.TaxPercentage,
			&i.TotalNetSalaryAfterTax,
			&i.TotalNetSalaryAfterTaxType,
			&i.PayrollUpdatedBy,
			&i.PayrollCreatedAt,
			&i.PayrollUpdatedAt,
			&i.AllowanceID,
			&i.AllowanceName,
			&i.AllowanceAmount,
			&i.AllowancePayrollID,
			&i.AllowanceUpdatedBy,
			&i.AllowanceCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPayrolls = `-- name: GetPayrolls :many
SELECT id, employee, date, salary_type, amount, total_of_salary_allowances, pension, pension_employer, pension_employee, total_net_salary, tax, tax_percentage, total_net_salary_after_tax, updated_by, created_at, updated_at, salary_amount_type, total_allowances_type, pension_employer_type, pension_employee_type, total_net_salary_type, total_net_salary_after_tax_type, er_id FROM HR_Payroll
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type GetPayrollsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPayrolls(ctx context.Context, arg GetPayrollsParams) ([]HrPayroll, error) {
	rows, err := q.db.QueryContext(ctx, getPayrolls, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrPayroll
	for rows.Next() {
		var i HrPayroll
		if err := rows.Scan(
			&i.ID,
			&i.Employee,
			&i.Date,
			&i.SalaryType,
			&i.Amount,
			&i.TotalOfSalaryAllowances,
			&i.Pension,
			&i.PensionEmployer,
			&i.PensionEmployee,
			&i.TotalNetSalary,
			&i.Tax,
			&i.TaxPercentage,
			&i.TotalNetSalaryAfterTax,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SalaryAmountType,
			&i.TotalAllowancesType,
			&i.PensionEmployerType,
			&i.PensionEmployeeType,
			&i.TotalNetSalaryType,
			&i.TotalNetSalaryAfterTaxType,
			&i.ErID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainerAssingedCount = `-- name: GetTrainerAssingedCount :one
SELECT COUNT(*) AS count
FROM FLM_trainer_assign
WHERE trainer_id = ?
  AND MONTH(CONVERT_TZ(` + "`" + `from` + "`" + `, '+00:00', '+05:00')) = MONTH(CONVERT_TZ(CURRENT_TIMESTAMP(), '+00:00', '+05:00'))
  AND YEAR(CONVERT_TZ(` + "`" + `from` + "`" + `, '+00:00', '+05:00')) = YEAR(CONVERT_TZ(CURRENT_TIMESTAMP(), '+00:00', '+05:00'))
`

func (q *Queries) GetTrainerAssingedCount(ctx context.Context, trainerID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTrainerAssingedCount, trainerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTrainerEmpDataFromID = `-- name: GetTrainerEmpDataFromID :one
SELECT trainer_id, employee_id, attendee_id, commission
FROM HR_Trainer_Emp
WHERE employee_id = ?
`

type GetTrainerEmpDataFromIDRow struct {
	TrainerID  int64           `json:"trainer_id"`
	EmployeeID int64           `json:"employee_id"`
	AttendeeID int64           `json:"attendee_id"`
	Commission decimal.Decimal `json:"commission"`
}

func (q *Queries) GetTrainerEmpDataFromID(ctx context.Context, employeeID int64) (GetTrainerEmpDataFromIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTrainerEmpDataFromID, employeeID)
	var i GetTrainerEmpDataFromIDRow
	err := row.Scan(
		&i.TrainerID,
		&i.EmployeeID,
		&i.AttendeeID,
		&i.Commission,
	)
	return i, err
}

const updatePayroll = `-- name: UpdatePayroll :exec
UPDATE HR_Payroll
SET
    employee = ?,
    date = ?,
    salary_type = ?,
    amount = ?,
    salary_amount_type = ?,
    total_of_salary_allowances = ?,
    total_allowances_type = ?,
    pension = ?,
    pension_employer = ?,
    pension_employer_type = ?,
    pension_employee = ?,
    pension_employee_type = ?,
    total_net_salary = ?,
    total_net_salary_type = ?,
    tax = ?,
    tax_percentage = ?,
    total_net_salary_after_tax = ?,
    total_net_salary_after_tax_type = ?,
    updated_by = ?
WHERE id = ?
`

type UpdatePayrollParams struct {
	Employee                   string          `json:"employee"`
	Date                       time.Time       `json:"date"`
	SalaryType                 string          `json:"salary_type"`
	Amount                     decimal.Decimal `json:"amount"`
	SalaryAmountType           string          `json:"salary_amount_type"`
	TotalOfSalaryAllowances    decimal.Decimal `json:"total_of_salary_allowances"`
	TotalAllowancesType        string          `json:"total_allowances_type"`
	Pension                    bool            `json:"pension"`
	PensionEmployer            sql.NullString  `json:"pension_employer"`
	PensionEmployerType        sql.NullString  `json:"pension_employer_type"`
	PensionEmployee            sql.NullString  `json:"pension_employee"`
	PensionEmployeeType        sql.NullString  `json:"pension_employee_type"`
	TotalNetSalary             decimal.Decimal `json:"total_net_salary"`
	TotalNetSalaryType         string          `json:"total_net_salary_type"`
	Tax                        bool            `json:"tax"`
	TaxPercentage              sql.NullString  `json:"tax_percentage"`
	TotalNetSalaryAfterTax     decimal.Decimal `json:"total_net_salary_after_tax"`
	TotalNetSalaryAfterTaxType string          `json:"total_net_salary_after_tax_type"`
	UpdatedBy                  sql.NullInt64   `json:"updated_by"`
	ID                         int64           `json:"id"`
}

func (q *Queries) UpdatePayroll(ctx context.Context, arg UpdatePayrollParams) error {
	_, err := q.db.ExecContext(ctx, updatePayroll,
		arg.Employee,
		arg.Date,
		arg.SalaryType,
		arg.Amount,
		arg.SalaryAmountType,
		arg.TotalOfSalaryAllowances,
		arg.TotalAllowancesType,
		arg.Pension,
		arg.PensionEmployer,
		arg.PensionEmployerType,
		arg.PensionEmployee,
		arg.PensionEmployeeType,
		arg.TotalNetSalary,
		arg.TotalNetSalaryType,
		arg.Tax,
		arg.TaxPercentage,
		arg.TotalNetSalaryAfterTax,
		arg.TotalNetSalaryAfterTaxType,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updatePayrollAllowance = `-- name: UpdatePayrollAllowance :exec
UPDATE HR_Payroll_Allowances
SET name = ?, amount = ?, amount_type=?, updated_by = ?
WHERE payroll_id = ?
`

type UpdatePayrollAllowanceParams struct {
	Name       string          `json:"name"`
	Amount     decimal.Decimal `json:"amount"`
	AmountType string          `json:"amount_type"`
	UpdatedBy  sql.NullInt64   `json:"updated_by"`
	PayrollID  int64           `json:"payroll_id"`
}

func (q *Queries) UpdatePayrollAllowance(ctx context.Context, arg UpdatePayrollAllowanceParams) error {
	_, err := q.db.ExecContext(ctx, updatePayrollAllowance,
		arg.Name,
		arg.Amount,
		arg.AmountType,
		arg.UpdatedBy,
		arg.PayrollID,
	)
	return err
}
