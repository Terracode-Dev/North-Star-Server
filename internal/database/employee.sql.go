// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: employee.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/shopspring/decimal"
)

const banEmployee = `-- name: BanEmployee :exec
UPDATE HR_Employee SET is_ban = ? WHERE id = ?
`

type BanEmployeeParams struct {
	IsBan bool  `json:"is_ban"`
	ID    int64 `json:"id"`
}

func (q *Queries) BanEmployee(ctx context.Context, arg BanEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, banEmployee, arg.IsBan, arg.ID)
	return err
}

const checkTrainerAssignmentAtTime = `-- name: CheckTrainerAssignmentAtTime :one
SELECT 
    EXISTS (
        SELECT 1
        FROM FLM_trainer_assign 
        WHERE trainer_id = ? 
        AND client_id = ?
        AND CONVERT_TZ(?, '+00:00', '+05:00') BETWEEN 
            CONVERT_TZ(` + "`" + `from` + "`" + `, '+00:00', '+05:00') AND 
            CONVERT_TZ(` + "`" + `to` + "`" + `, '+00:00', '+05:00')
    ) as is_assigned
`

type CheckTrainerAssignmentAtTimeParams struct {
	TrainerID int64     `json:"trainer_id"`
	ClientID  int64     `json:"client_id"`
	CONVERTTZ time.Time `json:"CONVERT_TZ"`
}

func (q *Queries) CheckTrainerAssignmentAtTime(ctx context.Context, arg CheckTrainerAssignmentAtTimeParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkTrainerAssignmentAtTime, arg.TrainerID, arg.ClientID, arg.CONVERTTZ)
	var is_assigned bool
	err := row.Scan(&is_assigned)
	return is_assigned, err
}

const checkTrainerFromEmail = `-- name: CheckTrainerFromEmail :one
SELECT attendee_id, user_id, branch_id, username, email, phone, nic, role
FROM door_lock_users
WHERE email = ? AND role = 'trainer'
`

type CheckTrainerFromEmailRow struct {
	AttendeeID int64          `json:"attendee_id"`
	UserID     int64          `json:"user_id"`
	BranchID   int64          `json:"branch_id"`
	Username   string         `json:"username"`
	Email      sql.NullString `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Nic        sql.NullString `json:"nic"`
	Role       sql.NullString `json:"role"`
}

func (q *Queries) CheckTrainerFromEmail(ctx context.Context, email sql.NullString) (CheckTrainerFromEmailRow, error) {
	row := q.db.QueryRowContext(ctx, checkTrainerFromEmail, email)
	var i CheckTrainerFromEmailRow
	err := row.Scan(
		&i.AttendeeID,
		&i.UserID,
		&i.BranchID,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.Nic,
		&i.Role,
	)
	return i, err
}

const createEmpAccessiability = `-- name: CreateEmpAccessiability :exec
INSERT INTO HR_EMP_Accessiability (
    accessibility, accessibility_from, accessibility_till, enable, updated_by, employee_id
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateEmpAccessiabilityParams struct {
	Accessibility     bool          `json:"accessibility"`
	AccessibilityFrom time.Time     `json:"accessibility_from"`
	AccessibilityTill time.Time     `json:"accessibility_till"`
	Enable            bool          `json:"enable"`
	UpdatedBy         sql.NullInt64 `json:"updated_by"`
	EmployeeID        int64         `json:"employee_id"`
}

func (q *Queries) CreateEmpAccessiability(ctx context.Context, arg CreateEmpAccessiabilityParams) error {
	_, err := q.db.ExecContext(ctx, createEmpAccessiability,
		arg.Accessibility,
		arg.AccessibilityFrom,
		arg.AccessibilityTill,
		arg.Enable,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const createEmpAllowances = `-- name: CreateEmpAllowances :exec
INSERT INTO HR_EMP_Allowances (
   name, amount, updated_by, employee_id 
) VALUES (
    ?, ?, ?, ?
)
`

type CreateEmpAllowancesParams struct {
	Name       string          `json:"name"`
	Amount     decimal.Decimal `json:"amount"`
	UpdatedBy  sql.NullInt64   `json:"updated_by"`
	EmployeeID int64           `json:"employee_id"`
}

func (q *Queries) CreateEmpAllowances(ctx context.Context, arg CreateEmpAllowancesParams) error {
	_, err := q.db.ExecContext(ctx, createEmpAllowances,
		arg.Name,
		arg.Amount,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const createEmpBankDetails = `-- name: CreateEmpBankDetails :exec
INSERT INTO HR_EMP_Bank_Details (
    bank_name, branch_name, account_number, account_holder, employee_id, updated_by
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateEmpBankDetailsParams struct {
	BankName      string        `json:"bank_name"`
	BranchName    string        `json:"branch_name"`
	AccountNumber string        `json:"account_number"`
	AccountHolder string        `json:"account_holder"`
	EmployeeID    int64         `json:"employee_id"`
	UpdatedBy     sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) CreateEmpBankDetails(ctx context.Context, arg CreateEmpBankDetailsParams) error {
	_, err := q.db.ExecContext(ctx, createEmpBankDetails,
		arg.BankName,
		arg.BranchName,
		arg.AccountNumber,
		arg.AccountHolder,
		arg.EmployeeID,
		arg.UpdatedBy,
	)
	return err
}

const createEmpBenifits = `-- name: CreateEmpBenifits :exec
INSERT INTO HR_EMP_Benifits (
    leave_status, leave_type, leave_count, health_insurance, insurance_from, insurance_till, retainment_plan, retainment_plan_from, retainment_plan_till, benifits, benifits_from, benifits_till, updated_by, employee_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEmpBenifitsParams struct {
	LeaveStatus        bool           `json:"leave_status"`
	LeaveType          sql.NullString `json:"leave_type"`
	LeaveCount         sql.NullInt32  `json:"leave_count"`
	HealthInsurance    string         `json:"health_insurance"`
	InsuranceFrom      time.Time      `json:"insurance_from"`
	InsuranceTill      time.Time      `json:"insurance_till"`
	RetainmentPlan     string         `json:"retainment_plan"`
	RetainmentPlanFrom time.Time      `json:"retainment_plan_from"`
	RetainmentPlanTill time.Time      `json:"retainment_plan_till"`
	Benifits           string         `json:"benifits"`
	BenifitsFrom       time.Time      `json:"benifits_from"`
	BenifitsTill       time.Time      `json:"benifits_till"`
	UpdatedBy          sql.NullInt64  `json:"updated_by"`
	EmployeeID         int64          `json:"employee_id"`
}

func (q *Queries) CreateEmpBenifits(ctx context.Context, arg CreateEmpBenifitsParams) error {
	_, err := q.db.ExecContext(ctx, createEmpBenifits,
		arg.LeaveStatus,
		arg.LeaveType,
		arg.LeaveCount,
		arg.HealthInsurance,
		arg.InsuranceFrom,
		arg.InsuranceTill,
		arg.RetainmentPlan,
		arg.RetainmentPlanFrom,
		arg.RetainmentPlanTill,
		arg.Benifits,
		arg.BenifitsFrom,
		arg.BenifitsTill,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const createEmpCertificates = `-- name: CreateEmpCertificates :exec
INSERT INTO HR_EMP_Certificates (
    date, name,updated_by, employee_id
) VALUES (
    ?, ?, ?, ?
)
`

type CreateEmpCertificatesParams struct {
	Date       time.Time     `json:"date"`
	Name       string        `json:"name"`
	UpdatedBy  sql.NullInt64 `json:"updated_by"`
	EmployeeID int64         `json:"employee_id"`
}

func (q *Queries) CreateEmpCertificates(ctx context.Context, arg CreateEmpCertificatesParams) error {
	_, err := q.db.ExecContext(ctx, createEmpCertificates,
		arg.Date,
		arg.Name,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const createEmpEmergencyDetails = `-- name: CreateEmpEmergencyDetails :exec
INSERT INTO HR_EMP_Emergency_Details (
    first_name, last_name, relationship, contact, employee_id, updated_by
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateEmpEmergencyDetailsParams struct {
	FirstName    string        `json:"first_name"`
	LastName     string        `json:"last_name"`
	Relationship string        `json:"relationship"`
	Contact      string        `json:"contact"`
	EmployeeID   int64         `json:"employee_id"`
	UpdatedBy    sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) CreateEmpEmergencyDetails(ctx context.Context, arg CreateEmpEmergencyDetailsParams) error {
	_, err := q.db.ExecContext(ctx, createEmpEmergencyDetails,
		arg.FirstName,
		arg.LastName,
		arg.Relationship,
		arg.Contact,
		arg.EmployeeID,
		arg.UpdatedBy,
	)
	return err
}

const createEmpExpatriate = `-- name: CreateEmpExpatriate :exec
INSERT INTO HR_EMP_Expatriate (
    expatriate, nationality, visa_type, visa_from, visa_till, visa_number, visa_fee, updated_by, employee_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEmpExpatriateParams struct {
	Expatriate  bool            `json:"expatriate"`
	Nationality sql.NullString  `json:"nationality"`
	VisaType    sql.NullString  `json:"visa_type"`
	VisaFrom    sql.NullTime    `json:"visa_from"`
	VisaTill    sql.NullTime    `json:"visa_till"`
	VisaNumber  sql.NullString  `json:"visa_number"`
	VisaFee     decimal.Decimal `json:"visa_fee"`
	UpdatedBy   sql.NullInt64   `json:"updated_by"`
	EmployeeID  int64           `json:"employee_id"`
}

func (q *Queries) CreateEmpExpatriate(ctx context.Context, arg CreateEmpExpatriateParams) error {
	_, err := q.db.ExecContext(ctx, createEmpExpatriate,
		arg.Expatriate,
		arg.Nationality,
		arg.VisaType,
		arg.VisaFrom,
		arg.VisaTill,
		arg.VisaNumber,
		arg.VisaFee,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const createEmpSalary = `-- name: CreateEmpSalary :exec
INSERT INTO HR_EMP_Salary (
    salary_type, amount, salary_amount_type, Total_of_salary_allowances, total_salary_allowances_type, pension_employer, pension_employer_type, pension_employee, pension_employee_type, total_net_salary, total_net_salary_type, employee_id, updated_by, er_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEmpSalaryParams struct {
	SalaryType                string          `json:"salary_type"`
	Amount                    decimal.Decimal `json:"amount"`
	SalaryAmountType          string          `json:"salary_amount_type"`
	TotalOfSalaryAllowances   decimal.Decimal `json:"total_of_salary_allowances"`
	TotalSalaryAllowancesType string          `json:"total_salary_allowances_type"`
	PensionEmployer           decimal.Decimal `json:"pension_employer"`
	PensionEmployerType       string          `json:"pension_employer_type"`
	PensionEmployee           decimal.Decimal `json:"pension_employee"`
	PensionEmployeeType       string          `json:"pension_employee_type"`
	TotalNetSalary            decimal.Decimal `json:"total_net_salary"`
	TotalNetSalaryType        string          `json:"total_net_salary_type"`
	EmployeeID                int64           `json:"employee_id"`
	UpdatedBy                 sql.NullInt64   `json:"updated_by"`
	ErID                      sql.NullInt64   `json:"er_id"`
}

func (q *Queries) CreateEmpSalary(ctx context.Context, arg CreateEmpSalaryParams) error {
	_, err := q.db.ExecContext(ctx, createEmpSalary,
		arg.SalaryType,
		arg.Amount,
		arg.SalaryAmountType,
		arg.TotalOfSalaryAllowances,
		arg.TotalSalaryAllowancesType,
		arg.PensionEmployer,
		arg.PensionEmployerType,
		arg.PensionEmployee,
		arg.PensionEmployeeType,
		arg.TotalNetSalary,
		arg.TotalNetSalaryType,
		arg.EmployeeID,
		arg.UpdatedBy,
		arg.ErID,
	)
	return err
}

const createEmpStatus = `-- name: CreateEmpStatus :exec
INSERT INTO HR_EMP_Status (
    status, department, designation, valid_from, valid_till, updated_by, employee_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEmpStatusParams struct {
	Status      string        `json:"status"`
	Department  string        `json:"department"`
	Designation string        `json:"designation"`
	ValidFrom   time.Time     `json:"valid_from"`
	ValidTill   time.Time     `json:"valid_till"`
	UpdatedBy   sql.NullInt64 `json:"updated_by"`
	EmployeeID  int64         `json:"employee_id"`
}

func (q *Queries) CreateEmpStatus(ctx context.Context, arg CreateEmpStatusParams) error {
	_, err := q.db.ExecContext(ctx, createEmpStatus,
		arg.Status,
		arg.Department,
		arg.Designation,
		arg.ValidFrom,
		arg.ValidTill,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const createEmpUser = `-- name: CreateEmpUser :exec
INSERT INTO HR_EMP_User (
    email, password, updated_by, employee_id, branch_id 
) VALUES (
    ?, ?, ?, ?,?
)
`

type CreateEmpUserParams struct {
	Email      string        `json:"email"`
	Password   string        `json:"password"`
	UpdatedBy  sql.NullInt64 `json:"updated_by"`
	EmployeeID int64         `json:"employee_id"`
	BranchID   int64         `json:"branch_id"`
}

func (q *Queries) CreateEmpUser(ctx context.Context, arg CreateEmpUserParams) error {
	_, err := q.db.ExecContext(ctx, createEmpUser,
		arg.Email,
		arg.Password,
		arg.UpdatedBy,
		arg.EmployeeID,
		arg.BranchID,
	)
	return err
}

const createEmployee = `-- name: CreateEmployee :execresult
INSERT INTO HR_Employee (
    first_name, last_name, gender, dob, religion, primary_number, secondary_number, 
    passport_id, nationality, passport_valid_till, nic, country, nic_valid_till, 
    address, current_country, email, updated_by
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEmployeeParams struct {
	FirstName         string        `json:"first_name"`
	LastName          string        `json:"last_name"`
	Gender            string        `json:"gender"`
	Dob               time.Time     `json:"dob"`
	Religion          string        `json:"religion"`
	PrimaryNumber     string        `json:"primary_number"`
	SecondaryNumber   string        `json:"secondary_number"`
	PassportID        string        `json:"passport_id"`
	Nationality       string        `json:"nationality"`
	PassportValidTill time.Time     `json:"passport_valid_till"`
	Nic               string        `json:"nic"`
	Country           string        `json:"country"`
	NicValidTill      time.Time     `json:"nic_valid_till"`
	Address           string        `json:"address"`
	CurrentCountry    string        `json:"current_country"`
	Email             string        `json:"email"`
	UpdatedBy         sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.Dob,
		arg.Religion,
		arg.PrimaryNumber,
		arg.SecondaryNumber,
		arg.PassportID,
		arg.Nationality,
		arg.PassportValidTill,
		arg.Nic,
		arg.Country,
		arg.NicValidTill,
		arg.Address,
		arg.CurrentCountry,
		arg.Email,
		arg.UpdatedBy,
	)
}

const createTrainerEmp = `-- name: CreateTrainerEmp :exec
INSERT INTO HR_Trainer_Emp (
    trainer_id, employee_id, attendee_id, commission
) VALUES (
    ?, ?, ?, ?
)
`

type CreateTrainerEmpParams struct {
	TrainerID  int64           `json:"trainer_id"`
	EmployeeID int64           `json:"employee_id"`
	AttendeeID int64           `json:"attendee_id"`
	Commission decimal.Decimal `json:"commission"`
}

func (q *Queries) CreateTrainerEmp(ctx context.Context, arg CreateTrainerEmpParams) error {
	_, err := q.db.ExecContext(ctx, createTrainerEmp,
		arg.TrainerID,
		arg.EmployeeID,
		arg.AttendeeID,
		arg.Commission,
	)
	return err
}

const deleteEmpAccessiability = `-- name: DeleteEmpAccessiability :exec
DELETE FROM HR_EMP_Accessiability WHERE employee_id = ?
`

func (q *Queries) DeleteEmpAccessiability(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpAccessiability, employeeID)
	return err
}

const deleteEmpAllowances = `-- name: DeleteEmpAllowances :exec
DELETE FROM HR_EMP_Allowances WHERE employee_id = ?
`

func (q *Queries) DeleteEmpAllowances(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpAllowances, employeeID)
	return err
}

const deleteEmpBankDetails = `-- name: DeleteEmpBankDetails :exec
DELETE FROM HR_EMP_Bank_Details WHERE employee_id = ?
`

func (q *Queries) DeleteEmpBankDetails(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpBankDetails, employeeID)
	return err
}

const deleteEmpBenifits = `-- name: DeleteEmpBenifits :exec
DELETE FROM HR_EMP_Benifits WHERE employee_id = ?
`

func (q *Queries) DeleteEmpBenifits(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpBenifits, employeeID)
	return err
}

const deleteEmpCertificates = `-- name: DeleteEmpCertificates :exec
DELETE FROM HR_EMP_Certificates WHERE employee_id = ?
`

func (q *Queries) DeleteEmpCertificates(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpCertificates, employeeID)
	return err
}

const deleteEmpEmergencyDetails = `-- name: DeleteEmpEmergencyDetails :exec
DELETE FROM HR_EMP_Emergency_Details WHERE employee_id = ?
`

func (q *Queries) DeleteEmpEmergencyDetails(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpEmergencyDetails, employeeID)
	return err
}

const deleteEmpExpatriate = `-- name: DeleteEmpExpatriate :exec
DELETE FROM HR_EMP_Expatriate WHERE employee_id = ?
`

func (q *Queries) DeleteEmpExpatriate(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpExpatriate, employeeID)
	return err
}

const deleteEmpFiles = `-- name: DeleteEmpFiles :exec
DELETE FROM HR_FileSubmit WHERE file_name = ? AND employee_id = ? AND file_type = ?
`

type DeleteEmpFilesParams struct {
	FileName   string `json:"file_name"`
	EmployeeID int64  `json:"employee_id"`
	FileType   string `json:"file_type"`
}

func (q *Queries) DeleteEmpFiles(ctx context.Context, arg DeleteEmpFilesParams) error {
	_, err := q.db.ExecContext(ctx, deleteEmpFiles, arg.FileName, arg.EmployeeID, arg.FileType)
	return err
}

const deleteEmpSalary = `-- name: DeleteEmpSalary :exec
DELETE FROM HR_EMP_Salary WHERE employee_id = ?
`

func (q *Queries) DeleteEmpSalary(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpSalary, employeeID)
	return err
}

const deleteEmpStatus = `-- name: DeleteEmpStatus :exec
DELETE FROM HR_EMP_Status WHERE employee_id = ?
`

func (q *Queries) DeleteEmpStatus(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpStatus, employeeID)
	return err
}

const deleteEmpUser = `-- name: DeleteEmpUser :exec
DELETE FROM HR_EMP_User WHERE employee_id = ?
`

func (q *Queries) DeleteEmpUser(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmpUser, employeeID)
	return err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM HR_Employee WHERE id = ?
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, id)
	return err
}

const deleteTrainerEmp = `-- name: DeleteTrainerEmp :exec
DELETE FROM HR_Trainer_Emp WHERE employee_id = ?
`

func (q *Queries) DeleteTrainerEmp(ctx context.Context, employeeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrainerEmp, employeeID)
	return err
}

const employeeLogin = `-- name: EmployeeLogin :one
SELECT employee_id, password, email, branch_id
FROM HR_EMP_User
WHERE email = ?
`

type EmployeeLoginRow struct {
	EmployeeID int64  `json:"employee_id"`
	Password   string `json:"password"`
	Email      string `json:"email"`
	BranchID   int64  `json:"branch_id"`
}

func (q *Queries) EmployeeLogin(ctx context.Context, email string) (EmployeeLoginRow, error) {
	row := q.db.QueryRowContext(ctx, employeeLogin, email)
	var i EmployeeLoginRow
	err := row.Scan(
		&i.EmployeeID,
		&i.Password,
		&i.Email,
		&i.BranchID,
	)
	return i, err
}

const getBranchwiseEmpCount = `-- name: GetBranchwiseEmpCount :one
SELECT 
    b.id as branch_id,
    b.name as branch_name,
    COUNT(e.id) as employee_count
FROM HR_Branch b
LEFT JOIN HR_EMP_User u ON b.id = u.branch_id
LEFT JOIN HR_Employee e ON u.employee_id = e.id
WHERE b.id = ? AND (e.is_ban = false OR e.is_ban IS NULL)
GROUP BY b.id, b.name
`

type GetBranchwiseEmpCountRow struct {
	BranchID      int64  `json:"branch_id"`
	BranchName    string `json:"branch_name"`
	EmployeeCount int64  `json:"employee_count"`
}

func (q *Queries) GetBranchwiseEmpCount(ctx context.Context, id int64) (GetBranchwiseEmpCountRow, error) {
	row := q.db.QueryRowContext(ctx, getBranchwiseEmpCount, id)
	var i GetBranchwiseEmpCountRow
	err := row.Scan(&i.BranchID, &i.BranchName, &i.EmployeeCount)
	return i, err
}

const getCertificateFile = `-- name: GetCertificateFile :one
SELECT file_name FROM HR_FileSubmit WHERE employee_id = ? AND file_type = 'certificate'
`

func (q *Queries) GetCertificateFile(ctx context.Context, employeeID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getCertificateFile, employeeID)
	var file_name string
	err := row.Scan(&file_name)
	return file_name, err
}

const getEmpFiles = `-- name: GetEmpFiles :many
SELECT file_name, file_type
FROM HR_FileSubmit
WHERE employee_id = ?
`

type GetEmpFilesRow struct {
	FileName string `json:"file_name"`
	FileType string `json:"file_type"`
}

func (q *Queries) GetEmpFiles(ctx context.Context, employeeID int64) ([]GetEmpFilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEmpFiles, employeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEmpFilesRow
	for rows.Next() {
		var i GetEmpFilesRow
		if err := rows.Scan(&i.FileName, &i.FileType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployee = `-- name: GetEmployee :many
SELECT
  e.id AS employee_id,
  e.first_name,
  e.last_name,
  usr.email AS user_email,
  br.name AS branch_name
FROM HR_Employee e
LEFT JOIN HR_EMP_User usr ON e.id = usr.employee_id
LEFT JOIN HR_Branch br ON usr.branch_id = br.id
WHERE 
    (e.is_ban = false OR e.is_ban IS NULL)
    AND
  (
    e.first_name LIKE CONCAT('%', ?, '%')
    OR e.last_name  LIKE CONCAT('%', ?, '%')
    OR usr.email    LIKE CONCAT('%', ?, '%')
  )
  AND (? = '' OR br.id = ?)
ORDER BY e.id DESC
LIMIT ? OFFSET ?
`

type GetEmployeeParams struct {
	CONCAT   interface{} `json:"CONCAT"`
	CONCAT_2 interface{} `json:"CONCAT_2"`
	CONCAT_3 interface{} `json:"CONCAT_3"`
	Column4  interface{} `json:"column_4"`
	ID       int64       `json:"id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

type GetEmployeeRow struct {
	EmployeeID int64          `json:"employee_id"`
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	UserEmail  sql.NullString `json:"user_email"`
	BranchName sql.NullString `json:"branch_name"`
}

func (q *Queries) GetEmployee(ctx context.Context, arg GetEmployeeParams) ([]GetEmployeeRow, error) {
	rows, err := q.db.QueryContext(ctx, getEmployee,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.CONCAT_3,
		arg.Column4,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEmployeeRow
	for rows.Next() {
		var i GetEmployeeRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.UserEmail,
			&i.BranchName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeAllowances = `-- name: GetEmployeeAllowances :many
SELECT name, amount
FROM HR_EMP_Allowances
WHERE employee_id = ?
`

type GetEmployeeAllowancesRow struct {
	Name   string          `json:"name"`
	Amount decimal.Decimal `json:"amount"`
}

func (q *Queries) GetEmployeeAllowances(ctx context.Context, employeeID int64) ([]GetEmployeeAllowancesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEmployeeAllowances, employeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEmployeeAllowancesRow
	for rows.Next() {
		var i GetEmployeeAllowancesRow
		if err := rows.Scan(&i.Name, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT 
    e.id AS employee_id, 
    e.first_name, 
    e.last_name, 
    e.gender, 
    e.dob, 
    e.religion, 
    e.primary_number, 
    e.secondary_number, 
    e.passport_id, 
    e.nationality, 
    e.passport_valid_till, 
    e.nic, 
    e.country, 
    e.nic_valid_till, 
    e.address,
    e.current_country, 
    e.email, 
    e.updated_by, 
    e.created_at, 
    e.updated_at,

    ed.first_name AS emergency_first_name, 
    ed.last_name AS emergency_last_name, 
    ed.relationship, 
    ed.contact AS emergency_contact, 

    bd.bank_name, 
    bd.branch_name, 
    bd.account_number, 
    bd.account_holder,

    s.salary_type, 
    s.amount, 
    s.salary_amount_type,
    s.Total_of_salary_allowances,
    s.total_salary_allowances_type, 
    s.pension_employer,
    s.pension_employer_type, 
    s.pension_employee, 
    s.pension_employee_type,
    s.total_net_salary,
    s.total_net_salary_type, 

    cert.date AS certificate_date, 
    cert.name AS certificate_name, 
    
    stat.status, 
    stat.department, 
    stat.designation, 
    stat.valid_from AS status_valid_from, 
    stat.valid_till AS status_valid_till, 

    ben.leave_status, 
    ben.leave_type, 
    ben.leave_count, 
    ben.health_insurance, 
    ben.insurance_from, 
    ben.insurance_till, 
    ben.retainment_plan, 
    ben.retainment_plan_from, 
    ben.retainment_plan_till, 
    ben.benifits, 
    ben.benifits_from, 
    ben.benifits_till, 

    usr.email AS user_email, 
    usr.password AS user_password, 
    usr.branch_id AS user_branch_id, 

    exp.expatriate, 
    exp.nationality AS exp_nationality, 
    exp.visa_type, 
    exp.visa_from, 
    exp.visa_till, 
    exp.visa_number, 
    exp.visa_fee, 
    
    acc.accessibility, 
    acc.accessibility_from, 
    acc.accessibility_till, 
    acc.enable

FROM HR_Employee e
LEFT JOIN HR_EMP_Emergency_Details ed ON e.id = ed.employee_id
LEFT JOIN HR_EMP_Bank_Details bd ON e.id = bd.employee_id
LEFT JOIN HR_EMP_Salary s ON e.id = s.employee_id
LEFT JOIN HR_EMP_Certificates cert ON e.id = cert.employee_id
LEFT JOIN HR_EMP_Status stat ON e.id = stat.employee_id
LEFT JOIN HR_EMP_Benifits ben ON e.id = ben.employee_id
LEFT JOIN HR_EMP_User usr ON e.id = usr.employee_id
LEFT JOIN HR_EMP_Expatriate exp ON e.id = exp.employee_id
LEFT JOIN HR_EMP_Accessiability acc ON e.id = acc.employee_id

WHERE e.id = ? AND (e.is_ban = false OR e.is_ban IS NULL)
`

type GetEmployeeByIDRow struct {
	EmployeeID                int64          `json:"employee_id"`
	FirstName                 string         `json:"first_name"`
	LastName                  string         `json:"last_name"`
	Gender                    string         `json:"gender"`
	Dob                       time.Time      `json:"dob"`
	Religion                  string         `json:"religion"`
	PrimaryNumber             string         `json:"primary_number"`
	SecondaryNumber           string         `json:"secondary_number"`
	PassportID                string         `json:"passport_id"`
	Nationality               string         `json:"nationality"`
	PassportValidTill         time.Time      `json:"passport_valid_till"`
	Nic                       string         `json:"nic"`
	Country                   string         `json:"country"`
	NicValidTill              time.Time      `json:"nic_valid_till"`
	Address                   string         `json:"address"`
	CurrentCountry            string         `json:"current_country"`
	Email                     string         `json:"email"`
	UpdatedBy                 sql.NullInt64  `json:"updated_by"`
	CreatedAt                 sql.NullTime   `json:"created_at"`
	UpdatedAt                 sql.NullTime   `json:"updated_at"`
	EmergencyFirstName        sql.NullString `json:"emergency_first_name"`
	EmergencyLastName         sql.NullString `json:"emergency_last_name"`
	Relationship              sql.NullString `json:"relationship"`
	EmergencyContact          sql.NullString `json:"emergency_contact"`
	BankName                  sql.NullString `json:"bank_name"`
	BranchName                sql.NullString `json:"branch_name"`
	AccountNumber             sql.NullString `json:"account_number"`
	AccountHolder             sql.NullString `json:"account_holder"`
	SalaryType                sql.NullString `json:"salary_type"`
	Amount                    sql.NullString `json:"amount"`
	SalaryAmountType          sql.NullString `json:"salary_amount_type"`
	TotalOfSalaryAllowances   sql.NullString `json:"total_of_salary_allowances"`
	TotalSalaryAllowancesType sql.NullString `json:"total_salary_allowances_type"`
	PensionEmployer           sql.NullString `json:"pension_employer"`
	PensionEmployerType       sql.NullString `json:"pension_employer_type"`
	PensionEmployee           sql.NullString `json:"pension_employee"`
	PensionEmployeeType       sql.NullString `json:"pension_employee_type"`
	TotalNetSalary            sql.NullString `json:"total_net_salary"`
	TotalNetSalaryType        sql.NullString `json:"total_net_salary_type"`
	CertificateDate           sql.NullTime   `json:"certificate_date"`
	CertificateName           sql.NullString `json:"certificate_name"`
	Status                    sql.NullString `json:"status"`
	Department                sql.NullString `json:"department"`
	Designation               sql.NullString `json:"designation"`
	StatusValidFrom           sql.NullTime   `json:"status_valid_from"`
	StatusValidTill           sql.NullTime   `json:"status_valid_till"`
	LeaveStatus               sql.NullBool   `json:"leave_status"`
	LeaveType                 sql.NullString `json:"leave_type"`
	LeaveCount                sql.NullInt32  `json:"leave_count"`
	HealthInsurance           sql.NullString `json:"health_insurance"`
	InsuranceFrom             sql.NullTime   `json:"insurance_from"`
	InsuranceTill             sql.NullTime   `json:"insurance_till"`
	RetainmentPlan            sql.NullString `json:"retainment_plan"`
	RetainmentPlanFrom        sql.NullTime   `json:"retainment_plan_from"`
	RetainmentPlanTill        sql.NullTime   `json:"retainment_plan_till"`
	Benifits                  sql.NullString `json:"benifits"`
	BenifitsFrom              sql.NullTime   `json:"benifits_from"`
	BenifitsTill              sql.NullTime   `json:"benifits_till"`
	UserEmail                 sql.NullString `json:"user_email"`
	UserPassword              sql.NullString `json:"user_password"`
	UserBranchID              sql.NullInt64  `json:"user_branch_id"`
	Expatriate                sql.NullBool   `json:"expatriate"`
	ExpNationality            sql.NullString `json:"exp_nationality"`
	VisaType                  sql.NullString `json:"visa_type"`
	VisaFrom                  sql.NullTime   `json:"visa_from"`
	VisaTill                  sql.NullTime   `json:"visa_till"`
	VisaNumber                sql.NullString `json:"visa_number"`
	VisaFee                   sql.NullString `json:"visa_fee"`
	Accessibility             sql.NullBool   `json:"accessibility"`
	AccessibilityFrom         sql.NullTime   `json:"accessibility_from"`
	AccessibilityTill         sql.NullTime   `json:"accessibility_till"`
	Enable                    sql.NullBool   `json:"enable"`
}

func (q *Queries) GetEmployeeByID(ctx context.Context, id int64) (GetEmployeeByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeByID, id)
	var i GetEmployeeByIDRow
	err := row.Scan(
		&i.EmployeeID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Religion,
		&i.PrimaryNumber,
		&i.SecondaryNumber,
		&i.PassportID,
		&i.Nationality,
		&i.PassportValidTill,
		&i.Nic,
		&i.Country,
		&i.NicValidTill,
		&i.Address,
		&i.CurrentCountry,
		&i.Email,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmergencyFirstName,
		&i.EmergencyLastName,
		&i.Relationship,
		&i.EmergencyContact,
		&i.BankName,
		&i.BranchName,
		&i.AccountNumber,
		&i.AccountHolder,
		&i.SalaryType,
		&i.Amount,
		&i.SalaryAmountType,
		&i.TotalOfSalaryAllowances,
		&i.TotalSalaryAllowancesType,
		&i.PensionEmployer,
		&i.PensionEmployerType,
		&i.PensionEmployee,
		&i.PensionEmployeeType,
		&i.TotalNetSalary,
		&i.TotalNetSalaryType,
		&i.CertificateDate,
		&i.CertificateName,
		&i.Status,
		&i.Department,
		&i.Designation,
		&i.StatusValidFrom,
		&i.StatusValidTill,
		&i.LeaveStatus,
		&i.LeaveType,
		&i.LeaveCount,
		&i.HealthInsurance,
		&i.InsuranceFrom,
		&i.InsuranceTill,
		&i.RetainmentPlan,
		&i.RetainmentPlanFrom,
		&i.RetainmentPlanTill,
		&i.Benifits,
		&i.BenifitsFrom,
		&i.BenifitsTill,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserBranchID,
		&i.Expatriate,
		&i.ExpNationality,
		&i.VisaType,
		&i.VisaFrom,
		&i.VisaTill,
		&i.VisaNumber,
		&i.VisaFee,
		&i.Accessibility,
		&i.AccessibilityFrom,
		&i.AccessibilityTill,
		&i.Enable,
	)
	return i, err
}

const getEmployeeDOB = `-- name: GetEmployeeDOB :one
SELECT dob FROM HR_Employee WHERE id = ?
`

func (q *Queries) GetEmployeeDOB(ctx context.Context, id int64) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeDOB, id)
	var dob time.Time
	err := row.Scan(&dob)
	return dob, err
}

const getEmployeeFromBranch = `-- name: GetEmployeeFromBranch :many
SELECT e.id, CONCAT(e.first_name, ' ', e.last_name) AS full_name
FROM HR_Employee e
JOIN HR_EMP_User u ON e.id = u.employee_id
WHERE u.branch_id = ? AND e.is_ban = false
`

type GetEmployeeFromBranchRow struct {
	ID       int64  `json:"id"`
	FullName string `json:"full_name"`
}

func (q *Queries) GetEmployeeFromBranch(ctx context.Context, branchID int64) ([]GetEmployeeFromBranchRow, error) {
	rows, err := q.db.QueryContext(ctx, getEmployeeFromBranch, branchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEmployeeFromBranchRow
	for rows.Next() {
		var i GetEmployeeFromBranchRow
		if err := rows.Scan(&i.ID, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeSalaryDetails = `-- name: GetEmployeeSalaryDetails :one
SElECT salary_type, amount, Total_of_salary_allowances, pension_employer, pension_employee, total_net_salary
FROM HR_EMP_Salary
WHERE employee_id = ?
`

type GetEmployeeSalaryDetailsRow struct {
	SalaryType              string          `json:"salary_type"`
	Amount                  decimal.Decimal `json:"amount"`
	TotalOfSalaryAllowances decimal.Decimal `json:"total_of_salary_allowances"`
	PensionEmployer         decimal.Decimal `json:"pension_employer"`
	PensionEmployee         decimal.Decimal `json:"pension_employee"`
	TotalNetSalary          decimal.Decimal `json:"total_net_salary"`
}

func (q *Queries) GetEmployeeSalaryDetails(ctx context.Context, employeeID int64) (GetEmployeeSalaryDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeSalaryDetails, employeeID)
	var i GetEmployeeSalaryDetailsRow
	err := row.Scan(
		&i.SalaryType,
		&i.Amount,
		&i.TotalOfSalaryAllowances,
		&i.PensionEmployer,
		&i.PensionEmployee,
		&i.TotalNetSalary,
	)
	return i, err
}

const getTrainerEmp = `-- name: GetTrainerEmp :one
SELECT
    trainer_id, employee_id, attendee_id, commission
FROM HR_Trainer_Emp
WHERE employee_id = ?
`

type GetTrainerEmpRow struct {
	TrainerID  int64           `json:"trainer_id"`
	EmployeeID int64           `json:"employee_id"`
	AttendeeID int64           `json:"attendee_id"`
	Commission decimal.Decimal `json:"commission"`
}

func (q *Queries) GetTrainerEmp(ctx context.Context, employeeID int64) (GetTrainerEmpRow, error) {
	row := q.db.QueryRowContext(ctx, getTrainerEmp, employeeID)
	var i GetTrainerEmpRow
	err := row.Scan(
		&i.TrainerID,
		&i.EmployeeID,
		&i.AttendeeID,
		&i.Commission,
	)
	return i, err
}

const getVisaFile = `-- name: GetVisaFile :one
SELECT file_name FROM HR_FileSubmit WHERE employee_id = ? AND file_type = 'visa'
`

func (q *Queries) GetVisaFile(ctx context.Context, employeeID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getVisaFile, employeeID)
	var file_name string
	err := row.Scan(&file_name)
	return file_name, err
}

const updateEmpAccessiability = `-- name: UpdateEmpAccessiability :exec
UPDATE HR_EMP_Accessiability SET
    accessibility = ?, accessibility_from = ?, accessibility_till = ?, enable = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpAccessiabilityParams struct {
	Accessibility     bool          `json:"accessibility"`
	AccessibilityFrom time.Time     `json:"accessibility_from"`
	AccessibilityTill time.Time     `json:"accessibility_till"`
	Enable            bool          `json:"enable"`
	UpdatedBy         sql.NullInt64 `json:"updated_by"`
	EmployeeID        int64         `json:"employee_id"`
}

func (q *Queries) UpdateEmpAccessiability(ctx context.Context, arg UpdateEmpAccessiabilityParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpAccessiability,
		arg.Accessibility,
		arg.AccessibilityFrom,
		arg.AccessibilityTill,
		arg.Enable,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpAllowances = `-- name: UpdateEmpAllowances :exec
UPDATE HR_EMP_Allowances SET
    name = ?, amount = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpAllowancesParams struct {
	Name       string          `json:"name"`
	Amount     decimal.Decimal `json:"amount"`
	UpdatedBy  sql.NullInt64   `json:"updated_by"`
	EmployeeID int64           `json:"employee_id"`
}

func (q *Queries) UpdateEmpAllowances(ctx context.Context, arg UpdateEmpAllowancesParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpAllowances,
		arg.Name,
		arg.Amount,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpBankDetails = `-- name: UpdateEmpBankDetails :exec
UPDATE HR_EMP_Bank_Details SET
    bank_name = ?, branch_name = ?, account_number = ?, account_holder = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpBankDetailsParams struct {
	BankName      string        `json:"bank_name"`
	BranchName    string        `json:"branch_name"`
	AccountNumber string        `json:"account_number"`
	AccountHolder string        `json:"account_holder"`
	UpdatedBy     sql.NullInt64 `json:"updated_by"`
	EmployeeID    int64         `json:"employee_id"`
}

func (q *Queries) UpdateEmpBankDetails(ctx context.Context, arg UpdateEmpBankDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpBankDetails,
		arg.BankName,
		arg.BranchName,
		arg.AccountNumber,
		arg.AccountHolder,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpBenifits = `-- name: UpdateEmpBenifits :exec
UPDATE HR_EMP_Benifits SET
    leave_status = ?, leave_type = ?, leave_count = ?, health_insurance = ?, 
    insurance_from = ?, insurance_till = ?, retainment_plan = ?, retainment_plan_from = ?, 
    retainment_plan_till = ?, benifits = ?, benifits_from = ?, benifits_till = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpBenifitsParams struct {
	LeaveStatus        bool           `json:"leave_status"`
	LeaveType          sql.NullString `json:"leave_type"`
	LeaveCount         sql.NullInt32  `json:"leave_count"`
	HealthInsurance    string         `json:"health_insurance"`
	InsuranceFrom      time.Time      `json:"insurance_from"`
	InsuranceTill      time.Time      `json:"insurance_till"`
	RetainmentPlan     string         `json:"retainment_plan"`
	RetainmentPlanFrom time.Time      `json:"retainment_plan_from"`
	RetainmentPlanTill time.Time      `json:"retainment_plan_till"`
	Benifits           string         `json:"benifits"`
	BenifitsFrom       time.Time      `json:"benifits_from"`
	BenifitsTill       time.Time      `json:"benifits_till"`
	UpdatedBy          sql.NullInt64  `json:"updated_by"`
	EmployeeID         int64          `json:"employee_id"`
}

func (q *Queries) UpdateEmpBenifits(ctx context.Context, arg UpdateEmpBenifitsParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpBenifits,
		arg.LeaveStatus,
		arg.LeaveType,
		arg.LeaveCount,
		arg.HealthInsurance,
		arg.InsuranceFrom,
		arg.InsuranceTill,
		arg.RetainmentPlan,
		arg.RetainmentPlanFrom,
		arg.RetainmentPlanTill,
		arg.Benifits,
		arg.BenifitsFrom,
		arg.BenifitsTill,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpCertificates = `-- name: UpdateEmpCertificates :exec
UPDATE HR_EMP_Certificates SET
    date = ?, name = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpCertificatesParams struct {
	Date       time.Time     `json:"date"`
	Name       string        `json:"name"`
	UpdatedBy  sql.NullInt64 `json:"updated_by"`
	EmployeeID int64         `json:"employee_id"`
}

func (q *Queries) UpdateEmpCertificates(ctx context.Context, arg UpdateEmpCertificatesParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpCertificates,
		arg.Date,
		arg.Name,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpEmergencyDetails = `-- name: UpdateEmpEmergencyDetails :exec
UPDATE HR_EMP_Emergency_Details SET
    first_name = ?, last_name = ?, relationship = ?, contact = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpEmergencyDetailsParams struct {
	FirstName    string        `json:"first_name"`
	LastName     string        `json:"last_name"`
	Relationship string        `json:"relationship"`
	Contact      string        `json:"contact"`
	UpdatedBy    sql.NullInt64 `json:"updated_by"`
	EmployeeID   int64         `json:"employee_id"`
}

func (q *Queries) UpdateEmpEmergencyDetails(ctx context.Context, arg UpdateEmpEmergencyDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpEmergencyDetails,
		arg.FirstName,
		arg.LastName,
		arg.Relationship,
		arg.Contact,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpExpatriate = `-- name: UpdateEmpExpatriate :exec
UPDATE HR_EMP_Expatriate SET
    expatriate = ?, nationality = ?, visa_type = ?, visa_from = ?, visa_till = ?, 
    visa_number = ?, visa_fee = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpExpatriateParams struct {
	Expatriate  bool            `json:"expatriate"`
	Nationality sql.NullString  `json:"nationality"`
	VisaType    sql.NullString  `json:"visa_type"`
	VisaFrom    sql.NullTime    `json:"visa_from"`
	VisaTill    sql.NullTime    `json:"visa_till"`
	VisaNumber  sql.NullString  `json:"visa_number"`
	VisaFee     decimal.Decimal `json:"visa_fee"`
	UpdatedBy   sql.NullInt64   `json:"updated_by"`
	EmployeeID  int64           `json:"employee_id"`
}

func (q *Queries) UpdateEmpExpatriate(ctx context.Context, arg UpdateEmpExpatriateParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpExpatriate,
		arg.Expatriate,
		arg.Nationality,
		arg.VisaType,
		arg.VisaFrom,
		arg.VisaTill,
		arg.VisaNumber,
		arg.VisaFee,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpSalary = `-- name: UpdateEmpSalary :exec
UPDATE HR_EMP_Salary SET
    salary_type = ?, amount = ?, Total_of_salary_allowances = ?, pension_employer = ?, 
    pension_employee = ?, total_net_salary = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpSalaryParams struct {
	SalaryType              string          `json:"salary_type"`
	Amount                  decimal.Decimal `json:"amount"`
	TotalOfSalaryAllowances decimal.Decimal `json:"total_of_salary_allowances"`
	PensionEmployer         decimal.Decimal `json:"pension_employer"`
	PensionEmployee         decimal.Decimal `json:"pension_employee"`
	TotalNetSalary          decimal.Decimal `json:"total_net_salary"`
	UpdatedBy               sql.NullInt64   `json:"updated_by"`
	EmployeeID              int64           `json:"employee_id"`
}

func (q *Queries) UpdateEmpSalary(ctx context.Context, arg UpdateEmpSalaryParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpSalary,
		arg.SalaryType,
		arg.Amount,
		arg.TotalOfSalaryAllowances,
		arg.PensionEmployer,
		arg.PensionEmployee,
		arg.TotalNetSalary,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpStatus = `-- name: UpdateEmpStatus :exec
UPDATE HR_EMP_Status SET
    status = ?, department = ?, designation = ?, valid_from = ?, valid_till = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpStatusParams struct {
	Status      string        `json:"status"`
	Department  string        `json:"department"`
	Designation string        `json:"designation"`
	ValidFrom   time.Time     `json:"valid_from"`
	ValidTill   time.Time     `json:"valid_till"`
	UpdatedBy   sql.NullInt64 `json:"updated_by"`
	EmployeeID  int64         `json:"employee_id"`
}

func (q *Queries) UpdateEmpStatus(ctx context.Context, arg UpdateEmpStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpStatus,
		arg.Status,
		arg.Department,
		arg.Designation,
		arg.ValidFrom,
		arg.ValidTill,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmpUser = `-- name: UpdateEmpUser :exec
UPDATE HR_EMP_User SET
    email = ?, password = ?, updated_by = ?
WHERE employee_id = ?
`

type UpdateEmpUserParams struct {
	Email      string        `json:"email"`
	Password   string        `json:"password"`
	UpdatedBy  sql.NullInt64 `json:"updated_by"`
	EmployeeID int64         `json:"employee_id"`
}

func (q *Queries) UpdateEmpUser(ctx context.Context, arg UpdateEmpUserParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpUser,
		arg.Email,
		arg.Password,
		arg.UpdatedBy,
		arg.EmployeeID,
	)
	return err
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE HR_Employee SET 
    first_name = ?, last_name = ?, gender = ?, dob = ?, religion = ?, primary_number = ?, secondary_number = ?,
    passport_id = ?, nationality = ?, passport_valid_till = ?, nic = ?, country = ?, nic_valid_till = ?, address = ?, current_country = ?,
    email = ?, updated_by = ?
WHERE id = ?
`

type UpdateEmployeeParams struct {
	FirstName         string        `json:"first_name"`
	LastName          string        `json:"last_name"`
	Gender            string        `json:"gender"`
	Dob               time.Time     `json:"dob"`
	Religion          string        `json:"religion"`
	PrimaryNumber     string        `json:"primary_number"`
	SecondaryNumber   string        `json:"secondary_number"`
	PassportID        string        `json:"passport_id"`
	Nationality       string        `json:"nationality"`
	PassportValidTill time.Time     `json:"passport_valid_till"`
	Nic               string        `json:"nic"`
	Country           string        `json:"country"`
	NicValidTill      time.Time     `json:"nic_valid_till"`
	Address           string        `json:"address"`
	CurrentCountry    string        `json:"current_country"`
	Email             string        `json:"email"`
	UpdatedBy         sql.NullInt64 `json:"updated_by"`
	ID                int64         `json:"id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.Dob,
		arg.Religion,
		arg.PrimaryNumber,
		arg.SecondaryNumber,
		arg.PassportID,
		arg.Nationality,
		arg.PassportValidTill,
		arg.Nic,
		arg.Country,
		arg.NicValidTill,
		arg.Address,
		arg.CurrentCountry,
		arg.Email,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateTrainerCommission = `-- name: UpdateTrainerCommission :exec
UPDATE HR_Trainer_Emp SET
    commission = ?,
    updated_by = ?
WHERE employee_id = ?
`

type UpdateTrainerCommissionParams struct {
	Commission decimal.Decimal `json:"commission"`
	UpdatedBy  sql.NullInt64   `json:"updated_by"`
	EmployeeID int64           `json:"employee_id"`
}

func (q *Queries) UpdateTrainerCommission(ctx context.Context, arg UpdateTrainerCommissionParams) error {
	_, err := q.db.ExecContext(ctx, updateTrainerCommission, arg.Commission, arg.UpdatedBy, arg.EmployeeID)
	return err
}
