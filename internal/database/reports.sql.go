// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reports.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/shopspring/decimal"
)

const getAccountDetails = `-- name: GetAccountDetails :many
SELECT 
    b.account_number as account_number,
    b.account_holder as account_name,
    p.total_net_salary_after_tax as amount_paid
FROM HR_EMP_Bank_Details b
INNER JOIN HR_Payroll p ON b.employee_id = p.emp_id
WHERE (
    Month(CONVERT_TZ(p.date,'+00:00', '+05:00'))  = Month(?)
)
`

type GetAccountDetailsRow struct {
	AccountNumber string          `json:"account_number"`
	AccountName   string          `json:"account_name"`
	AmountPaid    decimal.Decimal `json:"amount_paid"`
}

func (q *Queries) GetAccountDetails(ctx context.Context, month time.Time) ([]GetAccountDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccountDetails, month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountDetailsRow
	for rows.Next() {
		var i GetAccountDetailsRow
		if err := rows.Scan(&i.AccountNumber, &i.AccountName, &i.AmountPaid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredVisaOrReports = `-- name: GetExpiredVisaOrReports :many
SELECT 
    e.id as ` + "`" + `Employee ID` + "`" + `,
    CONCAT(e.first_name, ' ', e.last_name) as name,
    s.department,
    s.designation,
    s.status as employee_status,
    CONCAT(DATE_FORMAT(s.valid_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(s.valid_till, '%Y-%m-%d')) as status_from_to,
    ex.nationality,
    ex.visa_type,
    e.passport_id as passport_no,
    ex.visa_number,
    CONCAT(DATE_FORMAT(ex.visa_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(ex.visa_till, '%Y-%m-%d')) as visa_from_to
FROM HR_Employee e
INNER JOIN HR_EMP_Status s ON e.id = s.employee_id
INNER JOIN HR_EMP_Expatriate ex ON e.id = ex.employee_id
WHERE (
    ex.visa_till < CONVERT_TZ(NOW(), '+00:00', '+05:00') 
    OR e.passport_valid_till < CONVERT_TZ(NOW(), '+00:00', '+05:00')
)
`

type GetExpiredVisaOrReportsRow struct {
	EmployeeID     int64  `json:"employee id"`
	Name           string `json:"name"`
	Department     string `json:"department"`
	Designation    string `json:"designation"`
	EmployeeStatus string `json:"employee_status"`
	StatusFromTo   string `json:"status_from_to"`
	Nationality    string `json:"nationality"`
	VisaType       string `json:"visa_type"`
	PassportNo     string `json:"passport_no"`
	VisaNumber     string `json:"visa_number"`
	VisaFromTo     string `json:"visa_from_to"`
}

func (q *Queries) GetExpiredVisaOrReports(ctx context.Context) ([]GetExpiredVisaOrReportsRow, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredVisaOrReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpiredVisaOrReportsRow
	for rows.Next() {
		var i GetExpiredVisaOrReportsRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Department,
			&i.Designation,
			&i.EmployeeStatus,
			&i.StatusFromTo,
			&i.Nationality,
			&i.VisaType,
			&i.PassportNo,
			&i.VisaNumber,
			&i.VisaFromTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaffPayroll = `-- name: GetStaffPayroll :many
SELECT 
    e.id as ` + "`" + `Employee ID` + "`" + `,
    CONCAT(e.first_name, ' ', e.last_name) as name,
    s.department,
    s.designation,
    s.status as employee_status,
    DATE_FORMAT(p.date, '%Y-%m') as month,
    p.amount as gross_salary,
    p.total_of_salary_allowances as allowance,
    p.pension_employee as pension_employee,
    p.pension_employer as pension_employer,
    p.total_net_salary as net_salary,
    p.tax_percentage as tax_percentage,
    p.total_net_salary_after_tax as net_salary_after_tax,
    p.created_at as process_date
FROM HR_Employee e
INNER JOIN HR_EMP_Status s ON e.id = s.employee_id
INNER JOIN HR_Payroll p ON e.id = p.employee
WHERE (
    Month(CONVERT_TZ(p.date,'+00:00', '+05:00'))  = Month(?)
)
`

type GetStaffPayrollRow struct {
	EmployeeID        int64           `json:"employee id"`
	Name              string          `json:"name"`
	Department        string          `json:"department"`
	Designation       string          `json:"designation"`
	EmployeeStatus    string          `json:"employee_status"`
	Month             string          `json:"month"`
	GrossSalary       decimal.Decimal `json:"gross_salary"`
	Allowance         decimal.Decimal `json:"allowance"`
	PensionEmployee   sql.NullString  `json:"pension_employee"`
	PensionEmployer   sql.NullString  `json:"pension_employer"`
	NetSalary         decimal.Decimal `json:"net_salary"`
	TaxPercentage     sql.NullString  `json:"tax_percentage"`
	NetSalaryAfterTax decimal.Decimal `json:"net_salary_after_tax"`
	ProcessDate       sql.NullTime    `json:"process_date"`
}

func (q *Queries) GetStaffPayroll(ctx context.Context, month time.Time) ([]GetStaffPayrollRow, error) {
	rows, err := q.db.QueryContext(ctx, getStaffPayroll, month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStaffPayrollRow
	for rows.Next() {
		var i GetStaffPayrollRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Department,
			&i.Designation,
			&i.EmployeeStatus,
			&i.Month,
			&i.GrossSalary,
			&i.Allowance,
			&i.PensionEmployee,
			&i.PensionEmployer,
			&i.NetSalary,
			&i.TaxPercentage,
			&i.NetSalaryAfterTax,
			&i.ProcessDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisaOrPassportExpiringSoon = `-- name: GetVisaOrPassportExpiringSoon :many
SELECT 
    e.id as ` + "`" + `Employee ID` + "`" + `,
    CONCAT(e.first_name, ' ', e.last_name) as name,
    s.department,
    s.designation,
    s.status as employee_status,
    CONCAT(DATE_FORMAT(s.valid_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(s.valid_till, '%Y-%m-%d')) as status_from_to,
    ex.nationality,
    ex.visa_type,
    e.passport_id as passport_no,
    ex.visa_number,
    CONCAT(DATE_FORMAT(ex.visa_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(ex.visa_till, '%Y-%m-%d')) as visa_from_to
FROM HR_Employee e
INNER JOIN HR_EMP_Status s ON e.id = s.employee_id
INNER JOIN HR_EMP_Expatriate ex ON e.id = ex.employee_id
WHERE (
    (
        ex.visa_till > CONVERT_TZ(NOW(), '+00:00', '+05:00') AND
        ex.visa_till <= DATE_ADD(CONVERT_TZ(NOW(), '+00:00', '+05:00'), INTERVAL 7 DAY)
    )
    OR
    (
        e.passport_valid_till > CONVERT_TZ(NOW(), '+00:00', '+05:00') AND
        e.passport_valid_till <= DATE_ADD(CONVERT_TZ(NOW(), '+00:00', '+05:00'), INTERVAL 7 DAY)
    )
)
`

type GetVisaOrPassportExpiringSoonRow struct {
	EmployeeID     int64  `json:"employee id"`
	Name           string `json:"name"`
	Department     string `json:"department"`
	Designation    string `json:"designation"`
	EmployeeStatus string `json:"employee_status"`
	StatusFromTo   string `json:"status_from_to"`
	Nationality    string `json:"nationality"`
	VisaType       string `json:"visa_type"`
	PassportNo     string `json:"passport_no"`
	VisaNumber     string `json:"visa_number"`
	VisaFromTo     string `json:"visa_from_to"`
}

func (q *Queries) GetVisaOrPassportExpiringSoon(ctx context.Context) ([]GetVisaOrPassportExpiringSoonRow, error) {
	rows, err := q.db.QueryContext(ctx, getVisaOrPassportExpiringSoon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVisaOrPassportExpiringSoonRow
	for rows.Next() {
		var i GetVisaOrPassportExpiringSoonRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Department,
			&i.Designation,
			&i.EmployeeStatus,
			&i.StatusFromTo,
			&i.Nationality,
			&i.VisaType,
			&i.PassportNo,
			&i.VisaNumber,
			&i.VisaFromTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getempployeeInsurance = `-- name: GetempployeeInsurance :many
SELECT 
    e.id as ` + "`" + `Employee ID` + "`" + `,
    CONCAT(e.first_name, ' ', e.last_name) as name,
    s.department,
    s.designation,
    s.status as employee_status,
    CONCAT(DATE_FORMAT(s.valid_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(s.valid_till, '%Y-%m-%d')) as status_from_to,
    ex.nationality,
    i.health_insurance,
    CONCAT(DATE_FORMAT(i.insurance_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(i.insurance_till, '%Y-%m-%d')) as insurance_from_to
FROM HR_Employee e
INNER JOIN HR_EMP_Status s ON e.id = s.employee_id
INNER JOIN HR_EMP_Expatriate ex ON e.id = ex.employee_id
INNER JOIN HR_EMP_Benifits i ON e.id = i.employee_id
`

type GetempployeeInsuranceRow struct {
	EmployeeID      int64  `json:"employee id"`
	Name            string `json:"name"`
	Department      string `json:"department"`
	Designation     string `json:"designation"`
	EmployeeStatus  string `json:"employee_status"`
	StatusFromTo    string `json:"status_from_to"`
	Nationality     string `json:"nationality"`
	HealthInsurance string `json:"health_insurance"`
	InsuranceFromTo string `json:"insurance_from_to"`
}

func (q *Queries) GetempployeeInsurance(ctx context.Context) ([]GetempployeeInsuranceRow, error) {
	rows, err := q.db.QueryContext(ctx, getempployeeInsurance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetempployeeInsuranceRow
	for rows.Next() {
		var i GetempployeeInsuranceRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Department,
			&i.Designation,
			&i.EmployeeStatus,
			&i.StatusFromTo,
			&i.Nationality,
			&i.HealthInsurance,
			&i.InsuranceFromTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
