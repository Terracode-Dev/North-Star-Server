// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: reports.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/shopspring/decimal"
)

const getAccountDetails = `-- name: GetAccountDetails :many
SELECT 
    b.account_number as account_number,
    b.account_holder as account_name,
    p.total_net_salary_after_tax as amount_paid,
    u.branch_id as branch_id,
    br.name as branch_name
FROM HR_EMP_Bank_Details b
INNER JOIN HR_Payroll p ON b.employee_id = p.emp_id
INNER JOIN HR_EMP_User u ON b.employee_id = u.employee_id
INNER JOIN HR_Branch br ON u.branch_id = br.id
WHERE (
DATE_FORMAT(CONVERT_TZ(p.date, '+00:00', '+05:00'), '%Y-%m') = DATE_FORMAT(?, '%Y-%m')
    AND (
        u.branch_id = ? OR u.branch_id = ''
    )
)
`

type GetAccountDetailsParams struct {
	DATEFORMAT time.Time `json:"DATE_FORMAT"`
	BranchID   int64     `json:"branch_id"`
}

type GetAccountDetailsRow struct {
	AccountNumber string          `json:"account_number"`
	AccountName   string          `json:"account_name"`
	AmountPaid    decimal.Decimal `json:"amount_paid"`
	BranchID      int64           `json:"branch_id"`
	BranchName    string          `json:"branch_name"`
}

func (q *Queries) GetAccountDetails(ctx context.Context, arg GetAccountDetailsParams) ([]GetAccountDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccountDetails, arg.DATEFORMAT, arg.BranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountDetailsRow
	for rows.Next() {
		var i GetAccountDetailsRow
		if err := rows.Scan(
			&i.AccountNumber,
			&i.AccountName,
			&i.AmountPaid,
			&i.BranchID,
			&i.BranchName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredVisaOrReports = `-- name: GetExpiredVisaOrReports :many
SELECT 
    e.id as ` + "`" + `Employee ID` + "`" + `,
    CONCAT(e.first_name, ' ', e.last_name) as name,
    s.department,
    s.designation,
    s.status as employee_status,
    CONCAT(DATE_FORMAT(s.valid_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(s.valid_till, '%Y-%m-%d')) as status_from_to,
    u.branch_id as branch_id,
    b.name as branch_name,
    ex.nationality,
    ex.visa_type,
    e.passport_id as passport_no,
    ex.visa_number,
    CONCAT(DATE_FORMAT(ex.visa_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(ex.visa_till, '%Y-%m-%d')) as visa_from_to
FROM HR_Employee e
INNER JOIN HR_EMP_Status s ON e.id = s.employee_id
INNER JOIN HR_EMP_Expatriate ex ON e.id = ex.employee_id
INNER JOIN HR_EMP_User u ON e.id = u.employee_id
INNER JOIN HR_Branch b ON u.branch_id = b.id
WHERE (
    ex.visa_till < CONVERT_TZ(NOW(), '+00:00', '+05:00') 
    OR e.passport_valid_till < CONVERT_TZ(NOW(), '+00:00', '+05:00')
)
AND (
    u.branch_id = ? OR u.branch_id = ''
)
AND (? = '' OR e.first_name LIKE CONCAT('%', ?, '%'))
AND (? = '' OR e.last_name LIKE CONCAT('%', ?, '%'))
AND (? = '' OR s.department LIKE CONCAT('%', ?, '%'))
AND (? = '' OR e.passport_id LIKE CONCAT('%', ?, '%'))
AND (? = '' OR ex.visa_number LIKE CONCAT('%', ?, '%'))
ORDER BY e.id
LIMIT ? OFFSET ?
`

type GetExpiredVisaOrReportsParams struct {
	BranchID int64       `json:"branch_id"`
	Column2  interface{} `json:"column_2"`
	CONCAT   interface{} `json:"CONCAT"`
	Column4  interface{} `json:"column_4"`
	CONCAT_2 interface{} `json:"CONCAT_2"`
	Column6  interface{} `json:"column_6"`
	CONCAT_3 interface{} `json:"CONCAT_3"`
	Column8  interface{} `json:"column_8"`
	CONCAT_4 interface{} `json:"CONCAT_4"`
	Column10 interface{} `json:"column_10"`
	CONCAT_5 interface{} `json:"CONCAT_5"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

type GetExpiredVisaOrReportsRow struct {
	EmployeeID     int64          `json:"employee id"`
	Name           string         `json:"name"`
	Department     string         `json:"department"`
	Designation    string         `json:"designation"`
	EmployeeStatus string         `json:"employee_status"`
	StatusFromTo   string         `json:"status_from_to"`
	BranchID       int64          `json:"branch_id"`
	BranchName     string         `json:"branch_name"`
	Nationality    sql.NullString `json:"nationality"`
	VisaType       sql.NullString `json:"visa_type"`
	PassportNo     string         `json:"passport_no"`
	VisaNumber     sql.NullString `json:"visa_number"`
	VisaFromTo     string         `json:"visa_from_to"`
}

func (q *Queries) GetExpiredVisaOrReports(ctx context.Context, arg GetExpiredVisaOrReportsParams) ([]GetExpiredVisaOrReportsRow, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredVisaOrReports,
		arg.BranchID,
		arg.Column2,
		arg.CONCAT,
		arg.Column4,
		arg.CONCAT_2,
		arg.Column6,
		arg.CONCAT_3,
		arg.Column8,
		arg.CONCAT_4,
		arg.Column10,
		arg.CONCAT_5,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpiredVisaOrReportsRow
	for rows.Next() {
		var i GetExpiredVisaOrReportsRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Department,
			&i.Designation,
			&i.EmployeeStatus,
			&i.StatusFromTo,
			&i.BranchID,
			&i.BranchName,
			&i.Nationality,
			&i.VisaType,
			&i.PassportNo,
			&i.VisaNumber,
			&i.VisaFromTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaffPayroll = `-- name: GetStaffPayroll :many
SELECT 
    e.id as ` + "`" + `Employee ID` + "`" + `,
    CONCAT(e.first_name, ' ', e.last_name) as name,
    s.department,
    s.designation,
    s.status as employee_status,
    u.branch_id as branch_id,
    b.name as branch_name,
    DATE_FORMAT(p.date, '%Y-%m') as month,
    p.amount as gross_salary,
    p.total_of_salary_allowances as allowance,
    p.pension_employee as pension_employee,
    p.pension_employer as pension_employer,
    p.total_net_salary as net_salary,
    p.tax_percentage as tax_percentage,
    p.total_net_salary_after_tax as net_salary_after_tax,
    p.created_at as process_date
FROM HR_Employee e
INNER JOIN HR_EMP_Status s ON e.id = s.employee_id
INNER JOIN HR_Payroll p ON e.id = p.emp_id
INNER JOIN HR_EMP_User u ON e.id = u.employee_id
INNER JOIN HR_Branch b ON u.branch_id = b.id
WHERE 
    DATE_FORMAT(CONVERT_TZ(p.date, '+00:00', '+05:00'), '%Y-%m') = DATE_FORMAT(?, '%Y-%m')
    AND (
        (? = '' OR e.first_name LIKE CONCAT('%', ?, '%'))
        OR (? = '' OR e.last_name LIKE CONCAT('%', ?, '%'))
    )
    AND (
        u.branch_id = ? OR ? = 0
    )
ORDER BY p.date DESC
LIMIT ? OFFSET ?
`

type GetStaffPayrollParams struct {
	DATEFORMAT time.Time   `json:"DATE_FORMAT"`
	Column2    interface{} `json:"column_2"`
	CONCAT     interface{} `json:"CONCAT"`
	Column4    interface{} `json:"column_4"`
	CONCAT_2   interface{} `json:"CONCAT_2"`
	BranchID   int64       `json:"branch_id"`
	Column7    interface{} `json:"column_7"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetStaffPayrollRow struct {
	EmployeeID        int64           `json:"employee id"`
	Name              string          `json:"name"`
	Department        string          `json:"department"`
	Designation       string          `json:"designation"`
	EmployeeStatus    string          `json:"employee_status"`
	BranchID          int64           `json:"branch_id"`
	BranchName        string          `json:"branch_name"`
	Month             string          `json:"month"`
	GrossSalary       decimal.Decimal `json:"gross_salary"`
	Allowance         decimal.Decimal `json:"allowance"`
	PensionEmployee   sql.NullString  `json:"pension_employee"`
	PensionEmployer   sql.NullString  `json:"pension_employer"`
	NetSalary         decimal.Decimal `json:"net_salary"`
	TaxPercentage     sql.NullString  `json:"tax_percentage"`
	NetSalaryAfterTax decimal.Decimal `json:"net_salary_after_tax"`
	ProcessDate       sql.NullTime    `json:"process_date"`
}

func (q *Queries) GetStaffPayroll(ctx context.Context, arg GetStaffPayrollParams) ([]GetStaffPayrollRow, error) {
	rows, err := q.db.QueryContext(ctx, getStaffPayroll,
		arg.DATEFORMAT,
		arg.Column2,
		arg.CONCAT,
		arg.Column4,
		arg.CONCAT_2,
		arg.BranchID,
		arg.Column7,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStaffPayrollRow
	for rows.Next() {
		var i GetStaffPayrollRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Department,
			&i.Designation,
			&i.EmployeeStatus,
			&i.BranchID,
			&i.BranchName,
			&i.Month,
			&i.GrossSalary,
			&i.Allowance,
			&i.PensionEmployee,
			&i.PensionEmployer,
			&i.NetSalary,
			&i.TaxPercentage,
			&i.NetSalaryAfterTax,
			&i.ProcessDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisaOrPassportExpiringSoon = `-- name: GetVisaOrPassportExpiringSoon :many
SELECT 
    e.id as ` + "`" + `Employee ID` + "`" + `,
    CONCAT(e.first_name, ' ', e.last_name) as name,
    s.department,
    s.designation,
    s.status as employee_status,
    CONCAT(DATE_FORMAT(s.valid_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(s.valid_till, '%Y-%m-%d')) as status_from_to,
    u.branch_id as branch_id,
    b.name as branch_name,
    ex.nationality,
    ex.visa_type,
    e.passport_id as passport_no,
    ex.visa_number,
    CONCAT(DATE_FORMAT(ex.visa_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(ex.visa_till, '%Y-%m-%d')) as visa_from_to
FROM HR_Employee e
INNER JOIN HR_EMP_Status s ON e.id = s.employee_id
INNER JOIN HR_EMP_Expatriate ex ON e.id = ex.employee_id
INNER JOIN HR_EMP_User u ON e.id = u.employee_id
INNER JOIN HR_Branch b ON u.branch_id = b.id
WHERE (
    (
        ex.visa_till > CONVERT_TZ(NOW(), '+00:00', '+05:00') AND
        ex.visa_till <= DATE_ADD(CONVERT_TZ(NOW(), '+00:00', '+05:00'), INTERVAL 7 DAY)
    )
    OR
    (
        e.passport_valid_till > CONVERT_TZ(NOW(), '+00:00', '+05:00') AND
        e.passport_valid_till <= DATE_ADD(CONVERT_TZ(NOW(), '+00:00', '+05:00'), INTERVAL 7 DAY)
    )
)
AND (
     u.branch_id = ? OR u.branch_id = ''
)
AND (? = '' OR e.first_name LIKE CONCAT('%', ?, '%'))
AND (? = '' OR e.last_name LIKE CONCAT('%', ?, '%'))
AND (? = '' OR s.department LIKE CONCAT('%', ?, '%'))
AND (? = '' OR e.passport_id LIKE CONCAT('%', ?, '%'))
AND (? = '' OR ex.visa_number LIKE CONCAT('%', ?, '%'))
ORDER BY e.id
LIMIT ? OFFSET ?
`

type GetVisaOrPassportExpiringSoonParams struct {
	BranchID int64       `json:"branch_id"`
	Column2  interface{} `json:"column_2"`
	CONCAT   interface{} `json:"CONCAT"`
	Column4  interface{} `json:"column_4"`
	CONCAT_2 interface{} `json:"CONCAT_2"`
	Column6  interface{} `json:"column_6"`
	CONCAT_3 interface{} `json:"CONCAT_3"`
	Column8  interface{} `json:"column_8"`
	CONCAT_4 interface{} `json:"CONCAT_4"`
	Column10 interface{} `json:"column_10"`
	CONCAT_5 interface{} `json:"CONCAT_5"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

type GetVisaOrPassportExpiringSoonRow struct {
	EmployeeID     int64          `json:"employee id"`
	Name           string         `json:"name"`
	Department     string         `json:"department"`
	Designation    string         `json:"designation"`
	EmployeeStatus string         `json:"employee_status"`
	StatusFromTo   string         `json:"status_from_to"`
	BranchID       int64          `json:"branch_id"`
	BranchName     string         `json:"branch_name"`
	Nationality    sql.NullString `json:"nationality"`
	VisaType       sql.NullString `json:"visa_type"`
	PassportNo     string         `json:"passport_no"`
	VisaNumber     sql.NullString `json:"visa_number"`
	VisaFromTo     string         `json:"visa_from_to"`
}

func (q *Queries) GetVisaOrPassportExpiringSoon(ctx context.Context, arg GetVisaOrPassportExpiringSoonParams) ([]GetVisaOrPassportExpiringSoonRow, error) {
	rows, err := q.db.QueryContext(ctx, getVisaOrPassportExpiringSoon,
		arg.BranchID,
		arg.Column2,
		arg.CONCAT,
		arg.Column4,
		arg.CONCAT_2,
		arg.Column6,
		arg.CONCAT_3,
		arg.Column8,
		arg.CONCAT_4,
		arg.Column10,
		arg.CONCAT_5,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVisaOrPassportExpiringSoonRow
	for rows.Next() {
		var i GetVisaOrPassportExpiringSoonRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Department,
			&i.Designation,
			&i.EmployeeStatus,
			&i.StatusFromTo,
			&i.BranchID,
			&i.BranchName,
			&i.Nationality,
			&i.VisaType,
			&i.PassportNo,
			&i.VisaNumber,
			&i.VisaFromTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getempployeeInsurance = `-- name: GetempployeeInsurance :many
SELECT 
    e.id as ` + "`" + `Employee ID` + "`" + `,
    CONCAT(e.first_name, ' ', e.last_name) as name,
    s.department,
    s.designation,
    s.status as employee_status,
    CONCAT(DATE_FORMAT(s.valid_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(s.valid_till, '%Y-%m-%d')) as status_from_to,
    u.branch_id as branch_id,
    b.name as branch_name,
    ex.nationality,
    i.health_insurance,
    CONCAT(DATE_FORMAT(i.insurance_from, '%Y-%m-%d'), ' / ', DATE_FORMAT(i.insurance_till, '%Y-%m-%d')) as insurance_from_to
FROM HR_Employee e
INNER JOIN HR_EMP_Status s ON e.id = s.employee_id
INNER JOIN HR_EMP_Expatriate ex ON e.id = ex.employee_id
INNER JOIN HR_EMP_Benifits i ON e.id = i.employee_id
INNER JOIN HR_EMP_User u ON e.id = u.employee_id
INNER JOIN HR_Branch b ON u.branch_id = b.id
WHERE (
    u.branch_id = ? OR u.branch_id = ''
)
AND (? = '' OR e.first_name LIKE CONCAT('%', ?, '%'))
AND (? = '' OR e.last_name LIKE CONCAT('%', ?, '%'))
AND (? = '' OR s.department LIKE CONCAT('%', ?, '%'))
LIMIT ? OFFSET ?
`

type GetempployeeInsuranceParams struct {
	BranchID int64       `json:"branch_id"`
	Column2  interface{} `json:"column_2"`
	CONCAT   interface{} `json:"CONCAT"`
	Column4  interface{} `json:"column_4"`
	CONCAT_2 interface{} `json:"CONCAT_2"`
	Column6  interface{} `json:"column_6"`
	CONCAT_3 interface{} `json:"CONCAT_3"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

type GetempployeeInsuranceRow struct {
	EmployeeID      int64          `json:"employee id"`
	Name            string         `json:"name"`
	Department      string         `json:"department"`
	Designation     string         `json:"designation"`
	EmployeeStatus  string         `json:"employee_status"`
	StatusFromTo    string         `json:"status_from_to"`
	BranchID        int64          `json:"branch_id"`
	BranchName      string         `json:"branch_name"`
	Nationality     sql.NullString `json:"nationality"`
	HealthInsurance string         `json:"health_insurance"`
	InsuranceFromTo string         `json:"insurance_from_to"`
}

func (q *Queries) GetempployeeInsurance(ctx context.Context, arg GetempployeeInsuranceParams) ([]GetempployeeInsuranceRow, error) {
	rows, err := q.db.QueryContext(ctx, getempployeeInsurance,
		arg.BranchID,
		arg.Column2,
		arg.CONCAT,
		arg.Column4,
		arg.CONCAT_2,
		arg.Column6,
		arg.CONCAT_3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetempployeeInsuranceRow
	for rows.Next() {
		var i GetempployeeInsuranceRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Department,
			&i.Designation,
			&i.EmployeeStatus,
			&i.StatusFromTo,
			&i.BranchID,
			&i.BranchName,
			&i.Nationality,
			&i.HealthInsurance,
			&i.InsuranceFromTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
