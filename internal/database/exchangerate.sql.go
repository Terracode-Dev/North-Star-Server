// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchangerate.sql

package database

import (
	"context"

	"github.com/shopspring/decimal"
)

const createExchangeRate = `-- name: CreateExchangeRate :exec
INSERT INTO Exchange_Rate (exchange_rate, currency_type)
VALUES (?, ?)
`

type CreateExchangeRateParams struct {
	ExchangeRate decimal.Decimal `json:"exchange_rate"`
	CurrencyType string          `json:"currency_type"`
}

func (q *Queries) CreateExchangeRate(ctx context.Context, arg CreateExchangeRateParams) error {
	_, err := q.db.ExecContext(ctx, createExchangeRate, arg.ExchangeRate, arg.CurrencyType)
	return err
}

const deleteExchangeRate = `-- name: DeleteExchangeRate :exec
DELETE FROM Exchange_Rate
WHERE id = ?
`

func (q *Queries) DeleteExchangeRate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExchangeRate, id)
	return err
}

const getLatestExchangeRate = `-- name: GetLatestExchangeRate :many
SELECT (exchange_rate, id)
FROM Exchange_Rate
WHERE currency_type = ?
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestExchangeRate(ctx context.Context, currencyType string) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getLatestExchangeRate, currencyType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
