// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: presets.sql

package database

import (
	"context"
	"database/sql"
)

const createPreset = `-- name: CreatePreset :exec
INSERT INTO V2Presets (name, description, trainer_id)
VALUES (?, ?, ?)
`

type CreatePresetParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	TrainerID   int64          `json:"trainer_id"`
}

func (q *Queries) CreatePreset(ctx context.Context, arg CreatePresetParams) error {
	_, err := q.db.ExecContext(ctx, createPreset, arg.Name, arg.Description, arg.TrainerID)
	return err
}

const deletePreset = `-- name: DeletePreset :exec
DELETE FROM V2Presets WHERE id = ?
`

func (q *Queries) DeletePreset(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePreset, id)
	return err
}

const selectAllPresets = `-- name: SelectAllPresets :many
SELECT name, description, trainer_id 
FROM V2Presets
`

type SelectAllPresetsRow struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	TrainerID   int64          `json:"trainer_id"`
}

func (q *Queries) SelectAllPresets(ctx context.Context) ([]SelectAllPresetsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllPresets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllPresetsRow
	for rows.Next() {
		var i SelectAllPresetsRow
		if err := rows.Scan(&i.Name, &i.Description, &i.TrainerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPreset = `-- name: SelectPreset :one
SELECT name, description, trainer_id 
FROM V2Presets 
WHERE id = ?
`

type SelectPresetRow struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	TrainerID   int64          `json:"trainer_id"`
}

func (q *Queries) SelectPreset(ctx context.Context, id int64) (SelectPresetRow, error) {
	row := q.db.QueryRowContext(ctx, selectPreset, id)
	var i SelectPresetRow
	err := row.Scan(&i.Name, &i.Description, &i.TrainerID)
	return i, err
}

const selectPresetByname = `-- name: SelectPresetByname :many
SELECT id, name, description, trainer_id
FROM V2Presets
WHERE name = ?
`

type SelectPresetBynameRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	TrainerID   int64          `json:"trainer_id"`
}

func (q *Queries) SelectPresetByname(ctx context.Context, name string) ([]SelectPresetBynameRow, error) {
	rows, err := q.db.QueryContext(ctx, selectPresetByname, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectPresetBynameRow
	for rows.Next() {
		var i SelectPresetBynameRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TrainerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePreset = `-- name: UpdatePreset :exec
UPDATE V2Presets
SET
  name = ?,
  description = ?,
  trainer_id = ?
WHERE id = ?
`

type UpdatePresetParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	TrainerID   int64          `json:"trainer_id"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdatePreset(ctx context.Context, arg UpdatePresetParams) error {
	_, err := q.db.ExecContext(ctx, updatePreset,
		arg.Name,
		arg.Description,
		arg.TrainerID,
		arg.ID,
	)
	return err
}
